{
  "title": "Ome",
  "description": "The OME element is a container for all information objects accessible by\nOME.\n\nThese information objects include descriptions of the imaging experiments\nand the people who perform them, descriptions of the microscope, the resulting\nimages and how they were acquired, the analyses performed on those images,\nand the analysis results themselves.\nAn OME file may contain any or all of this information.\nWith the creation of the Metadata Only Companion OME-XML and Binary Only OME-TIFF files\nthe top level OME node has changed slightly.\nIt can EITHER:\nContain all the previously expected elements\nOR:\nContain a single BinaryOnly element that points at\nits Metadata Only Companion OME-XML file.\n\n:ivar rights:\n:ivar project:\n:ivar dataset:\n:ivar folder:\n:ivar experiment:\n:ivar plate:\n:ivar screen:\n:ivar experimenter:\n:ivar experimenter_group:\n:ivar instrument:\n:ivar image:\n:ivar structured_annotations:\n:ivar roi:\n:ivar binary_only: Pointer to an external metadata file. If this\n    element is present, then no other metadata may be present in\n    this file, i.e. this file is a place-holder.\n:ivar uuid: This unique identifier is used to keep track of multi\n    part files. It allows the links between files to survive\n    renaming. While OPTIONAL in the general case this is REQUIRED in\n    a MetadataOnly Companion to a collection of BinaryOnly files.\n:ivar creator: This is the name of the creating application of the\n    OME-XML and preferably its full version. e.g \"CompanyName,\n    SoftwareName, V2.6.3456\" This is optional but we hope it will be\n    set by applications writing out OME-XML from scratch.",
  "type": "object",
  "properties": {
    "rights": {
      "title": "Rights",
      "metadata": {
        "name": "Rights",
        "type": "Element"
      },
      "allOf": [
        {
          "$ref": "#/definitions/Rights"
        }
      ]
    },
    "project": {
      "title": "Project",
      "metadata": {
        "name": "Project",
        "type": "Element"
      },
      "type": "array",
      "items": {
        "$ref": "#/definitions/Project"
      }
    },
    "dataset": {
      "title": "Dataset",
      "metadata": {
        "name": "Dataset",
        "type": "Element"
      },
      "type": "array",
      "items": {
        "$ref": "#/definitions/Dataset"
      }
    },
    "folder": {
      "title": "Folder",
      "metadata": {
        "name": "Folder",
        "type": "Element"
      },
      "type": "array",
      "items": {
        "$ref": "#/definitions/Folder"
      }
    },
    "experiment": {
      "title": "Experiment",
      "metadata": {
        "name": "Experiment",
        "type": "Element"
      },
      "type": "array",
      "items": {
        "$ref": "#/definitions/Experiment"
      }
    },
    "plate": {
      "title": "Plate",
      "metadata": {
        "name": "Plate",
        "type": "Element"
      },
      "type": "array",
      "items": {
        "$ref": "#/definitions/Plate"
      }
    },
    "screen": {
      "title": "Screen",
      "metadata": {
        "name": "Screen",
        "type": "Element"
      },
      "type": "array",
      "items": {
        "$ref": "#/definitions/Screen"
      }
    },
    "experimenter": {
      "title": "Experimenter",
      "metadata": {
        "name": "Experimenter",
        "type": "Element"
      },
      "type": "array",
      "items": {
        "$ref": "#/definitions/Experimenter"
      }
    },
    "experimenter_group": {
      "title": "Experimenter Group",
      "metadata": {
        "name": "ExperimenterGroup",
        "type": "Element"
      },
      "type": "array",
      "items": {
        "$ref": "#/definitions/ExperimenterGroup"
      }
    },
    "instrument": {
      "title": "Instrument",
      "metadata": {
        "name": "Instrument",
        "type": "Element"
      },
      "type": "array",
      "items": {
        "$ref": "#/definitions/Instrument"
      }
    },
    "image": {
      "title": "Image",
      "metadata": {
        "name": "Image",
        "type": "Element"
      },
      "type": "array",
      "items": {
        "$ref": "#/definitions/Image"
      }
    },
    "structured_annotations": {
      "title": "Structured Annotations",
      "metadata": {
        "name": "StructuredAnnotations",
        "type": "Element"
      },
      "allOf": [
        {
          "$ref": "#/definitions/StructuredAnnotations"
        }
      ]
    },
    "roi": {
      "title": "Roi",
      "metadata": {
        "name": "ROI",
        "type": "Element"
      },
      "type": "array",
      "items": {
        "$ref": "#/definitions/Roi"
      }
    },
    "binary_only": {
      "title": "Binary Only",
      "metadata": {
        "name": "BinaryOnly",
        "type": "Element"
      },
      "allOf": [
        {
          "$ref": "#/definitions/BinaryOnly"
        }
      ]
    },
    "uuid": {
      "title": "Uuid",
      "pattern": "(urn:uuid:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})",
      "metadata": {
        "name": "UUID",
        "type": "Attribute",
        "pattern": "(urn:uuid:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
      },
      "type": "string"
    },
    "creator": {
      "title": "Creator",
      "metadata": {
        "name": "Creator",
        "type": "Attribute"
      },
      "type": "string"
    }
  },
  "definitions": {
    "Rights": {
      "title": "Rights",
      "description": "The rights holder of this data and the rights held.\n\n:ivar rights_holder: The rights holder for this data. [plain-text\n    multi-line string] e.g. \"Copyright (C) 2002 - 2016 Open\n    Microscopy Environment\"\n:ivar rights_held: The rights held by the rights holder. [plain-text\n    multi-line string] e.g. \"All rights reserved\" or \"Creative\n    Commons Attribution 3.0 Unported License\"",
      "type": "object",
      "properties": {
        "rights_holder": {
          "title": "Rights Holder",
          "metadata": {
            "name": "RightsHolder",
            "type": "Element",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "rights_held": {
          "title": "Rights Held",
          "metadata": {
            "name": "RightsHeld",
            "type": "Element",
            "white_space": "preserve"
          },
          "type": "string"
        }
      }
    },
    "ExperimenterRef": {
      "title": "ExperimenterRef",
      "description": "This empty element has a required Experimenter ID and an optional DocumentID\nattribute which refers to one of the Experimenters defined within OME.",
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "ExperimenterGroupRef": {
      "title": "ExperimenterGroupRef",
      "description": "This empty element has a reference (the ExperimenterGroup ID attribute) to a\nExperimenterGroup defined within OME.",
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:ExperimenterGroup:\\S+)|(ExperimenterGroup:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:ExperimenterGroup:\\S+)|(ExperimenterGroup:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "DatasetRef": {
      "title": "DatasetRef",
      "description": "The DatasetRef element refers to a Dataset by specifying the Dataset ID\nattribute.\n\nOne or more DatasetRef elements may be listed within the Image\nelement to specify what Datasets the Image belongs to.",
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Dataset:\\S+)|(Dataset:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Dataset:\\S+)|(Dataset:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "AnnotationRef": {
      "title": "AnnotationRef",
      "description": "The AnnotationRef element is a reference to an element derived from the\nCommonAnnotation element.",
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "Project": {
      "title": "Project",
      "description": "The Project ID is required. Datasets can be grouped into projects using a\nmany-to-many relationship.\n\nA Dataset may belong to one or more Projects by including one or more ProjectRef elements which refer to Project IDs.\nProjects do not directly contain images - only by virtue of containing datasets, which themselves contain images.\n\n:ivar description: A description for the project. [plain-text multi-\n    line string]\n:ivar experimenter_ref:\n:ivar experimenter_group_ref:\n:ivar dataset_ref:\n:ivar annotation_ref:\n:ivar name:\n:ivar id:",
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "experimenter_ref": {
          "title": "Experimenter Ref",
          "metadata": {
            "name": "ExperimenterRef",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ExperimenterRef"
            }
          ]
        },
        "experimenter_group_ref": {
          "title": "Experimenter Group Ref",
          "metadata": {
            "name": "ExperimenterGroupRef",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ExperimenterGroupRef"
            }
          ]
        },
        "dataset_ref": {
          "title": "Dataset Ref",
          "metadata": {
            "name": "DatasetRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatasetRef"
          }
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "name": {
          "title": "Name",
          "metadata": {
            "name": "Name",
            "type": "Attribute"
          },
          "type": "string"
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Project:\\S+)|(Project:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Project:\\S+)|(Project:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "ImageRef": {
      "title": "ImageRef",
      "description": "The ImageRef element is a reference to an Image element.",
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Image:\\S+)|(Image:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Image:\\S+)|(Image:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "Dataset": {
      "title": "Dataset",
      "description": "An element specifying a collection of images that are always processed\ntogether.\n\nImages can belong to more than one Dataset, and a Dataset may\ncontain more than one Image. Images contain one or more DatasetRef\nelements to specify what datasets they belong to. Once a Dataset has\nbeen processed in any way, its collection of images cannot be\naltered. The ExperimenterRef and ExperimenterGroupRef elements\nspecify the person and group this Dataset belongs to. Projects may\ncontain one or more Datasets, and Datasets may belong to one or more\nProjects. This relationship is specified by listing DatasetRef\nelements within the Project element.\n\n:ivar description: A description for the dataset. [plain-text multi-\n    line string]\n:ivar experimenter_ref:\n:ivar experimenter_group_ref:\n:ivar image_ref:\n:ivar annotation_ref:\n:ivar name: A name for the dataset that is suitable for presentation\n    to the user.\n:ivar id:",
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "experimenter_ref": {
          "title": "Experimenter Ref",
          "metadata": {
            "name": "ExperimenterRef",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ExperimenterRef"
            }
          ]
        },
        "experimenter_group_ref": {
          "title": "Experimenter Group Ref",
          "metadata": {
            "name": "ExperimenterGroupRef",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ExperimenterGroupRef"
            }
          ]
        },
        "image_ref": {
          "title": "Image Ref",
          "metadata": {
            "name": "ImageRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageRef"
          }
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "name": {
          "title": "Name",
          "metadata": {
            "name": "Name",
            "type": "Attribute"
          },
          "type": "string"
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Dataset:\\S+)|(Dataset:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Dataset:\\S+)|(Dataset:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "FolderRef": {
      "title": "FolderRef",
      "description": "The FolderRef element refers to a Folder by specifying the Folder ID\nattribute.\n\nOne or more FolderRef elements may be listed within the Folder\nelement to specify what Folders the Folder contains. This tree\nhierarchy must be acyclic.",
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Folder:\\S+)|(Folder:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Folder:\\S+)|(Folder:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "Roiref": {
      "title": "Roiref",
      "description": "Reference is an empty complex type that is contained and extended by all the\n*Ref elements and also the Settings Complex Type Each *Ref element defines an\nattribute named ID of simple type *ID and no other information Each simple type\n*ID is restricted to the base type LSID with an appropriate pattern.",
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:\\S+)|(\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:\\S+)|(\\S+)"
          },
          "type": "string"
        }
      }
    },
    "Folder": {
      "title": "Folder",
      "description": "An element specifying a possibly heterogeneous collection of data.\n\nFolders may contain Folders so that data may be organized within a\ntree of Folders. Data may be in multiple Folders but a Folder may\nnot be in more than one other Folder.\n\n:ivar description: A description for the folder. [plain-text multi-\n    line string]\n:ivar folder_ref:\n:ivar image_ref:\n:ivar roiref:\n:ivar annotation_ref:\n:ivar id:\n:ivar name: A name for the folder that is suitable for presentation\n    to the user.",
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "folder_ref": {
          "title": "Folder Ref",
          "metadata": {
            "name": "FolderRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/FolderRef"
          }
        },
        "image_ref": {
          "title": "Image Ref",
          "metadata": {
            "name": "ImageRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageRef"
          }
        },
        "roiref": {
          "title": "Roiref",
          "metadata": {
            "name": "ROIRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roiref"
          }
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Folder:\\S+)|(Folder:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Folder:\\S+)|(Folder:\\S+)"
          },
          "type": "string"
        },
        "name": {
          "title": "Name",
          "metadata": {
            "name": "Name",
            "type": "Attribute"
          },
          "type": "string"
        }
      }
    },
    "UnitsLength": {
      "title": "UnitsLength",
      "description": "The units used to represent a length.\n\n:cvar YM: yottameter SI unit.\n:cvar ZM: zettameter SI unit.\n:cvar EM: exameter SI unit.\n:cvar PM: petameter SI unit.\n:cvar TM: terameter SI unit.\n:cvar GM: gigameter SI unit.\n:cvar MM: megameter SI unit.\n:cvar KM: kilometer SI unit.\n:cvar HM: hectometer SI unit.\n:cvar DAM: decameter SI unit.\n:cvar M: meter SI unit.\n:cvar DM: decimeter SI unit.\n:cvar CM: centimeter SI unit.\n:cvar MM_1: millimeter SI unit.\n:cvar M_1: micrometer SI unit.\n:cvar NM: nanometer SI unit.\n:cvar PM_1: picometer SI unit.\n:cvar FM: femtometer SI unit.\n:cvar AM: attometer SI unit.\n:cvar ZM_1: zeptometer SI unit.\n:cvar YM_1: yoctometer SI unit.\n:cvar VALUE: \u00e5ngstr\u00f6m SI-derived unit.\n:cvar THOU: thou Imperial unit (or mil, 1/1000 inch).\n:cvar LI: line Imperial unit (1/12 inch).\n:cvar IN: inch Imperial unit.\n:cvar FT: foot Imperial unit.\n:cvar YD: yard Imperial unit.\n:cvar MI: terrestrial mile Imperial unit.\n:cvar UA: astronomical unit SI-derived unit. The official term is ua\n    as the SI standard assigned AU to absorbance unit.\n:cvar LY: light year.\n:cvar PC: parsec.\n:cvar PT: typography point Imperial-derived unit (1/72 inch). Use of\n    this unit should be limited to font sizes.\n:cvar PIXEL: pixel abstract unit.  This is not convertible to any\n    other length unit without a calibrated scaling factor. Its use\n    should should be limited to ROI objects, and converted to an\n    appropriate length units using the PhysicalSize units of the\n    Image the ROI is attached to.\n:cvar REFERENCE_FRAME: reference frame abstract unit.  This is not\n    convertible to any other length unit without a scaling factor.\n    Its use should be limited to uncalibrated stage positions, and\n    converted to an appropriate length unit using a calibrated\n    scaling factor.",
      "enum": [
        "Ym",
        "Zm",
        "Em",
        "Pm",
        "Tm",
        "Gm",
        "Mm",
        "km",
        "hm",
        "dam",
        "m",
        "dm",
        "cm",
        "mm",
        "\u00b5m",
        "nm",
        "pm",
        "fm",
        "am",
        "zm",
        "ym",
        "\u00c5",
        "thou",
        "li",
        "in",
        "ft",
        "yd",
        "mi",
        "ua",
        "ly",
        "pc",
        "pt",
        "pixel",
        "reference frame"
      ]
    },
    "LightSourceSettings": {
      "title": "LightSourceSettings",
      "description": ":ivar id:\n:ivar attenuation: The Attenuation of the light source [units:none]\n    A fraction, as a value from 0.0 to 1.0.\n:ivar wavelength: The Wavelength of the light source. Units are set\n    by WavelengthUnit.\n:ivar wavelength_unit: The units of the Wavelength of the light\n    source - default:nanometres[nm]",
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:LightSource:\\S+)|(LightSource:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:LightSource:\\S+)|(LightSource:\\S+)"
          },
          "type": "string"
        },
        "attenuation": {
          "title": "Attenuation",
          "minimum": 0.0,
          "maximum": 1.0,
          "metadata": {
            "name": "Attenuation",
            "type": "Attribute",
            "min_inclusive": 0.0,
            "max_inclusive": 1.0
          },
          "type": "number"
        },
        "wavelength": {
          "title": "Wavelength",
          "exclusiveMinimum": 0.0,
          "metadata": {
            "name": "Wavelength",
            "type": "Attribute",
            "min_exclusive": 0.0
          },
          "type": "number"
        },
        "wavelength_unit": {
          "default": "nm",
          "metadata": {
            "name": "WavelengthUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        }
      }
    },
    "MicrobeamManipulationValue": {
      "title": "MicrobeamManipulationValue",
      "description": "An enumeration.",
      "enum": [
        "FRAP",
        "FLIP",
        "InverseFRAP",
        "Photoablation",
        "Photoactivation",
        "Uncaging",
        "OpticalTrapping",
        "Other"
      ]
    },
    "MicrobeamManipulation": {
      "title": "MicrobeamManipulation",
      "description": "Defines a microbeam operation type and the region of the image it was\napplied to.\n\nThe LightSourceRef element is a reference to a LightSource specified\nin the Instrument element which was used for a technique other than\nillumination for the purpose of imaging. For example, a laser used\nfor photobleaching.\n\n:ivar description: A description for the Microbeam Manipulation.\n    [plain-text multi-line string]\n:ivar roiref:\n:ivar experimenter_ref:\n:ivar light_source_settings:\n:ivar id:\n:ivar type_value: The type of manipulation performed.",
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "roiref": {
          "title": "Roiref",
          "metadata": {
            "name": "ROIRef",
            "type": "Element",
            "min_occurs": 1
          },
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roiref"
          }
        },
        "experimenter_ref": {
          "title": "Experimenter Ref",
          "metadata": {
            "name": "ExperimenterRef",
            "type": "Element",
            "required": true
          },
          "allOf": [
            {
              "$ref": "#/definitions/ExperimenterRef"
            }
          ]
        },
        "light_source_settings": {
          "title": "Light Source Settings",
          "metadata": {
            "name": "LightSourceSettings",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/LightSourceSettings"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:MicrobeamManipulation:\\S+)|(MicrobeamManipulation:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:MicrobeamManipulation:\\S+)|(MicrobeamManipulation:\\S+)"
          },
          "type": "string"
        },
        "type_value": {
          "metadata": {
            "name": "Type",
            "type": "Attribute",
            "tokens": true
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/MicrobeamManipulationValue"
          }
        }
      }
    },
    "ExperimentValue": {
      "title": "ExperimentValue",
      "description": "An enumeration.",
      "enum": [
        "FP",
        "FRET",
        "TimeLapse",
        "FourDPlus",
        "Screen",
        "Immunocytochemistry",
        "Immunofluorescence",
        "FISH",
        "Electrophysiology",
        "IonImaging",
        "Colocalization",
        "PGIDocumentation",
        "FluorescenceLifetime",
        "SpectralImaging",
        "Photobleaching",
        "SPIM",
        "Other"
      ]
    },
    "Experiment": {
      "title": "Experiment",
      "description": "This element describes the type of experiment.\n\nThe required Type attribute must contain one or more entries from the following list:\nFP FRET Time-lapse 4-D+ Screen Immunocytochemistry FISH Electrophysiology  Ion-Imaging Colocalization PGI/Documentation\nFRAP Photoablation Optical-Trapping Photoactivation Fluorescence-Lifetime Spectral-Imaging Other\nFP refers to fluorescent proteins, PGI/Documentation is not a 'data' image.\nThe optional Description element may contain free text to further describe the experiment.\n\n:ivar description: A description for the experiment. [plain-text\n    multi-line string]\n:ivar experimenter_ref: This is a link to the Experimenter who\n    conducted the experiment\n:ivar microbeam_manipulation:\n:ivar type_value: A term to describe the type of experiment.\n:ivar id:",
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "experimenter_ref": {
          "title": "Experimenter Ref",
          "metadata": {
            "name": "ExperimenterRef",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ExperimenterRef"
            }
          ]
        },
        "microbeam_manipulation": {
          "title": "Microbeam Manipulation",
          "metadata": {
            "name": "MicrobeamManipulation",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/MicrobeamManipulation"
          }
        },
        "type_value": {
          "metadata": {
            "name": "Type",
            "type": "Attribute",
            "tokens": true
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExperimentValue"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experiment:\\S+)|(Experiment:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experiment:\\S+)|(Experiment:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "WellSample": {
      "title": "WellSample",
      "description": "WellSample is an individual image that has been captured within a Well.\n\n:ivar image_ref: This is the main link to the core Image element\n:ivar id:\n:ivar position_x: The X position of the field (image) within the\n    well relative to the well origin defined on the Plate. Units are\n    set by PositionXUnit.\n:ivar position_xunit: The units of the position in X -\n    default:reference frame.\n:ivar position_y: The Y position of the field (image) within the\n    well relative to the well origin defined on the Plate. Units are\n    set by PositionYUnit.\n:ivar position_yunit: The units of the position in Y -\n    default:reference frame.\n:ivar timepoint: The time-point at which the image started to be\n    collected\n:ivar index: This records the order of the well samples. Each index\n    should be unique for a given plate but they do not have to be\n    sequential, there may be gaps if part of the dataset is missing.\n    In the user interface the displayed value of the index will be\n    calculated modulo the number of PlateAcquisitions for the plate.",
      "type": "object",
      "properties": {
        "image_ref": {
          "title": "Image Ref",
          "metadata": {
            "name": "ImageRef",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ImageRef"
            }
          ]
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:WellSample:\\S+)|(WellSample:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:WellSample:\\S+)|(WellSample:\\S+)"
          },
          "type": "string"
        },
        "position_x": {
          "title": "Position X",
          "metadata": {
            "name": "PositionX",
            "type": "Attribute"
          },
          "type": "number"
        },
        "position_xunit": {
          "default": "reference frame",
          "metadata": {
            "name": "PositionXUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "position_y": {
          "title": "Position Y",
          "metadata": {
            "name": "PositionY",
            "type": "Attribute"
          },
          "type": "number"
        },
        "position_yunit": {
          "default": "reference frame",
          "metadata": {
            "name": "PositionYUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "index": {
          "title": "Index",
          "minimum": 0,
          "metadata": {
            "name": "Index",
            "type": "Attribute",
            "required": true,
            "min_inclusive": 0
          },
          "type": "integer"
        }
      }
    },
    "ReagentRef": {
      "title": "ReagentRef",
      "description": "Reference is an empty complex type that is contained and extended by all the\n*Ref elements and also the Settings Complex Type Each *Ref element defines an\nattribute named ID of simple type *ID and no other information Each simple type\n*ID is restricted to the base type LSID with an appropriate pattern.",
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Reagent:\\S+)|(Reagent:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Reagent:\\S+)|(Reagent:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "Well": {
      "title": "Well",
      "description": "A Well is a component of the Well/Plate/Screen construct to describe\nscreening applications.\n\nA Well has a number of WellSample elements that link to the Images\ncollected in this well. The ReagentRef links any Reagents that were\nused in this Well. A well is part of only one Plate. The origin for\nthe row and column identifiers is the top left corner of the plate\nstarting at zero. i.e The top left well of a plate is index (0,0)\n\n:ivar well_sample:\n:ivar reagent_ref:\n:ivar annotation_ref:\n:ivar id:\n:ivar column: This is the column index of the well, the origin is\n    the top left corner of the plate with the first column of cells\n    being column zero. i.e top left is (0,0) The combination of Row,\n    Column has to be unique for each well in a plate.\n:ivar row: This is the row index of the well, the origin is the top\n    left corner of the plate with the first row of wells being row\n    zero. i.e top left is (0,0) The combination of Row, Column has\n    to be unique for each well in a plate.\n:ivar external_description: A description of the externally defined\n    identifier for this plate.\n:ivar external_identifier: The ExternalIdentifier attribute may\n    contain a reference to an external database.\n:ivar type_value: A human readable identifier for the screening\n    status. e.g. empty, positive control, negative control, control,\n    experimental, etc.\n:ivar color: A marker color used to highlight the well - encoded as\n    RGBA The default value \"-1\" is #FFFFFFFF so solid white (it is a\n    signed 32 bit value) NOTE: Prior to the 2012-06 schema the\n    default value was incorrect and produced a transparent red not\n    solid white.",
      "type": "object",
      "properties": {
        "well_sample": {
          "title": "Well Sample",
          "metadata": {
            "name": "WellSample",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/WellSample"
          }
        },
        "reagent_ref": {
          "title": "Reagent Ref",
          "metadata": {
            "name": "ReagentRef",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ReagentRef"
            }
          ]
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Well:\\S+)|(Well:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Well:\\S+)|(Well:\\S+)"
          },
          "type": "string"
        },
        "column": {
          "title": "Column",
          "minimum": 0,
          "metadata": {
            "name": "Column",
            "type": "Attribute",
            "required": true,
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "row": {
          "title": "Row",
          "minimum": 0,
          "metadata": {
            "name": "Row",
            "type": "Attribute",
            "required": true,
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "external_description": {
          "title": "External Description",
          "metadata": {
            "name": "ExternalDescription",
            "type": "Attribute"
          },
          "type": "string"
        },
        "external_identifier": {
          "title": "External Identifier",
          "metadata": {
            "name": "ExternalIdentifier",
            "type": "Attribute"
          },
          "type": "string"
        },
        "type_value": {
          "title": "Type Value",
          "metadata": {
            "name": "Type",
            "type": "Attribute"
          },
          "type": "string"
        },
        "color": {
          "title": "Color",
          "default": -1,
          "metadata": {
            "name": "Color",
            "type": "Attribute"
          },
          "type": "integer"
        }
      }
    },
    "WellSampleRef": {
      "title": "WellSampleRef",
      "description": "The WellSampleRef element is a reference to a WellSample element.",
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:WellSample:\\S+)|(WellSample:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:WellSample:\\S+)|(WellSample:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "PlateAcquisition": {
      "title": "PlateAcquisition",
      "description": "PlateAcquisition is used to describe a single acquisition run for a plate.\n\nThis object is used to record the set of images acquired in a single\nacquisition run. The Images for this run are linked to\nPlateAcquisition through WellSample.\n\n:ivar description: A description for the PlateAcquisition.\n:ivar well_sample_ref:\n:ivar annotation_ref:\n:ivar id:\n:ivar name:\n:ivar end_time: Time when the last image of this acquisition was\n    collected\n:ivar start_time: Time when the first image of this acquisition was\n    collected\n:ivar maximum_field_count: The maximum number of fields (well\n    samples) in any well in this PlateAcquisition. This is only used\n    to speed up user interaction by stopping the reading of every\n    well sample.",
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "well_sample_ref": {
          "title": "Well Sample Ref",
          "metadata": {
            "name": "WellSampleRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/WellSampleRef"
          }
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:PlateAcquisition:\\S+)|(PlateAcquisition:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:PlateAcquisition:\\S+)|(PlateAcquisition:\\S+)"
          },
          "type": "string"
        },
        "name": {
          "title": "Name",
          "metadata": {
            "name": "Name",
            "type": "Attribute"
          },
          "type": "string"
        },
        "maximum_field_count": {
          "title": "Maximum Field Count",
          "minimum": 1,
          "metadata": {
            "name": "MaximumFieldCount",
            "type": "Attribute",
            "min_inclusive": 1
          },
          "type": "integer"
        }
      }
    },
    "NamingConvention": {
      "title": "NamingConvention",
      "description": "Predefined list of values for the well labels.\n\n:cvar LETTER: While the label type 'number' has a clear meaning the\n    'letter' type is more complex. If you have less than 26 values\n    use letters A to Z. Once you get more than 26 values there are\n    several different approaches in use. One we have see include:\n    Single letter, then double letter each running A to Z, right\n    first e.g. A, B, C, ... X, Y, Z, AA, AB, AC, ... AY, AZ, BA, BB,\n    ... This is the format used by Microsoft Excel so users may be\n    familiar with it. This is the approach we use in the OMERO\n    client applications. CAPITALsmall, each running A to Z, small\n    first e.g. Aa, Ab, Ac, ... Ax, Ay, Az, Ba, Bb, Bc, ... By, Bz,\n    Ca, Cb, ... This is in use by some plate manufactures. Single\n    letter, then double letter, then triple letter, and so on e.g.\n    A, B, C, ... X, Y, Z, AA, BB, CC, ... YY, ZZ, AAA, BBB, ... This\n    has the advantage that the first 26 are the same as the standard\n    but has a problem an the labels get wider and wider leading to\n    user interface problems.\n:cvar NUMBER: 1, 2, 3, ...",
      "enum": [
        "letter",
        "number"
      ]
    },
    "Plate": {
      "title": "Plate",
      "description": "This element identifies microtiter plates within a screen.\n\nA plate can belong to more than one screen. The Screen(s) that a\nplate belongs to are specified by the ScreenRef element. The Plate\nID and Name attributes are required. The Wells in a plate are\nnumbers from the top-left corner in a grid starting at zero. i.e.\nThe top-left well of a plate is index (0,0)\n\n:ivar description: A description for the plate.\n:ivar well:\n:ivar annotation_ref:\n:ivar plate_acquisition:\n:ivar id:\n:ivar name: The Name identifies the plate to the user. It is used\n    much like the ID, and so must be unique within the document. If\n    a plate name is not available when one is needed it will be\n    constructed in the following order: 1. If name is available use\n    it. 2. If not use \"Start time - End time\" (NOTE: Not a\n    subtraction! A string representation of the two times separated\n    by a dash.) 3. If these times are not available use the Plate\n    ID.\n:ivar status: A textual annotation of the current state of the plate\n    with respect to the experiment work-flow; e.g. 1. Seed cell:\n    done; 2. Transfection: done;      3. Gel doc: todo.\n:ivar external_identifier: The ExternalIdentifier attribute may\n    contain a reference to an external database.\n:ivar column_naming_convention: The ColumnNamingConvention\n:ivar row_naming_convention: The RowNamingConvention\n:ivar well_origin_x: This defines the X position to use for the\n    origin of the fields (individual images) taken in a well. It is\n    used with the X in the WellSample to display the fields in the\n    correct position relative to each other. Each Well in the plate\n    has the same well origin. Units are set by WellOriginXUnit. In\n    the OMERO clients by convention we display the WellOrigin in the\n    center of the view.\n:ivar well_origin_xunit: The units of the well origin in X -\n    default:reference frame.\n:ivar well_origin_y: This defines the Y position to use for the\n    origin of the fields (individual images) taken in a well. It is\n    used with the Y in the WellSample to display the fields in the\n    correct position relative to each other. Each Well in the plate\n    has the same well origin.  Units are set by WellOriginYUnit. In\n    the OMERO clients by convention we display the WellOrigin in the\n    center of the view.\n:ivar well_origin_yunit: The units of the well origin in Y -\n    default:reference frame.\n:ivar rows: The number of rows in the plate\n:ivar columns: The number of columns in the plate\n:ivar field_index: The index of the WellSample to display as the\n    default Field",
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "well": {
          "title": "Well",
          "metadata": {
            "name": "Well",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Well"
          }
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "plate_acquisition": {
          "title": "Plate Acquisition",
          "metadata": {
            "name": "PlateAcquisition",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlateAcquisition"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Plate:\\S+)|(Plate:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Plate:\\S+)|(Plate:\\S+)"
          },
          "type": "string"
        },
        "name": {
          "title": "Name",
          "metadata": {
            "name": "Name",
            "type": "Attribute"
          },
          "type": "string"
        },
        "status": {
          "title": "Status",
          "metadata": {
            "name": "Status",
            "type": "Attribute"
          },
          "type": "string"
        },
        "external_identifier": {
          "title": "External Identifier",
          "metadata": {
            "name": "ExternalIdentifier",
            "type": "Attribute"
          },
          "type": "string"
        },
        "column_naming_convention": {
          "metadata": {
            "name": "ColumnNamingConvention",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/NamingConvention"
            }
          ]
        },
        "row_naming_convention": {
          "metadata": {
            "name": "RowNamingConvention",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/NamingConvention"
            }
          ]
        },
        "well_origin_x": {
          "title": "Well Origin X",
          "metadata": {
            "name": "WellOriginX",
            "type": "Attribute"
          },
          "type": "number"
        },
        "well_origin_xunit": {
          "default": "reference frame",
          "metadata": {
            "name": "WellOriginXUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "well_origin_y": {
          "title": "Well Origin Y",
          "metadata": {
            "name": "WellOriginY",
            "type": "Attribute"
          },
          "type": "number"
        },
        "well_origin_yunit": {
          "default": "reference frame",
          "metadata": {
            "name": "WellOriginYUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "rows": {
          "title": "Rows",
          "minimum": 1,
          "metadata": {
            "name": "Rows",
            "type": "Attribute",
            "min_inclusive": 1
          },
          "type": "integer"
        },
        "columns": {
          "title": "Columns",
          "minimum": 1,
          "metadata": {
            "name": "Columns",
            "type": "Attribute",
            "min_inclusive": 1
          },
          "type": "integer"
        },
        "field_index": {
          "title": "Field Index",
          "minimum": 0,
          "metadata": {
            "name": "FieldIndex",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        }
      }
    },
    "Reagent": {
      "title": "Reagent",
      "description": "Reagent is used to describe a chemical or some other physical experimental\nparameter.\n\n:ivar description: A long description for the reagent.\n:ivar annotation_ref:\n:ivar id:\n:ivar name: A short name for the reagent\n:ivar reagent_identifier: This is a reference to an external (to\n    OME) representation of the Reagent. It serves as a foreign key\n    into an external database. - It is sometimes referred to as\n    ExternalIdentifier.",
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Reagent:\\S+)|(Reagent:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Reagent:\\S+)|(Reagent:\\S+)"
          },
          "type": "string"
        },
        "name": {
          "title": "Name",
          "metadata": {
            "name": "Name",
            "type": "Attribute"
          },
          "type": "string"
        },
        "reagent_identifier": {
          "title": "Reagent Identifier",
          "metadata": {
            "name": "ReagentIdentifier",
            "type": "Attribute"
          },
          "type": "string"
        }
      }
    },
    "PlateRef": {
      "title": "PlateRef",
      "description": "Reference is an empty complex type that is contained and extended by all the\n*Ref elements and also the Settings Complex Type Each *Ref element defines an\nattribute named ID of simple type *ID and no other information Each simple type\n*ID is restricted to the base type LSID with an appropriate pattern.",
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Plate:\\S+)|(Plate:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Plate:\\S+)|(Plate:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "Screen": {
      "title": "Screen",
      "description": "The Screen element is a grouping for Plates.\n\nThe required attribute is the Screen's Name and ID - both must be unique within the document.\nThe Screen element may contain an ExternalRef attribute that refers to an external database.\nA description of the screen may be specified in the Description element.\nScreens may contain overlapping sets of Plates i.e.      Screens and Plates have a many-to-many relationship.\nPlates contain one or more ScreenRef elements to specify what screens they belong to.\n\n:ivar description: A description for the screen.\n:ivar reagent:\n:ivar plate_ref: The PlateRef element is a reference to a Plate\n    element. Screen elements may have one or more PlateRef elements\n    to define the plates that are part of the screen. Plates may\n    belong to more than one screen.\n:ivar annotation_ref:\n:ivar id:\n:ivar name:\n:ivar protocol_identifier: A pointer to an externally defined\n    protocol, usually in a screening database.\n:ivar protocol_description: A description of the screen protocol;\n    may contain very detailed information to reproduce some of that\n    found in a screening database.\n:ivar reagent_set_description: A description of the set of reagents;\n    may contain very detailed information to reproduce some of that\n    information found in a screening database.\n:ivar reagent_set_identifier: A pointer to an externally defined set\n    of reagents, usually in a screening database/automation\n    database.\n:ivar type_value: A human readable identifier for the screen type;\n    e.g. RNAi, cDNA, SiRNA, etc. This string is likely to become an\n    enumeration in future releases.",
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "reagent": {
          "title": "Reagent",
          "metadata": {
            "name": "Reagent",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reagent"
          }
        },
        "plate_ref": {
          "title": "Plate Ref",
          "metadata": {
            "name": "PlateRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlateRef"
          }
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Screen:\\S+)|(Screen:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Screen:\\S+)|(Screen:\\S+)"
          },
          "type": "string"
        },
        "name": {
          "title": "Name",
          "metadata": {
            "name": "Name",
            "type": "Attribute"
          },
          "type": "string"
        },
        "protocol_identifier": {
          "title": "Protocol Identifier",
          "metadata": {
            "name": "ProtocolIdentifier",
            "type": "Attribute"
          },
          "type": "string"
        },
        "protocol_description": {
          "title": "Protocol Description",
          "metadata": {
            "name": "ProtocolDescription",
            "type": "Attribute"
          },
          "type": "string"
        },
        "reagent_set_description": {
          "title": "Reagent Set Description",
          "metadata": {
            "name": "ReagentSetDescription",
            "type": "Attribute"
          },
          "type": "string"
        },
        "reagent_set_identifier": {
          "title": "Reagent Set Identifier",
          "metadata": {
            "name": "ReagentSetIdentifier",
            "type": "Attribute"
          },
          "type": "string"
        },
        "type_value": {
          "title": "Type Value",
          "metadata": {
            "name": "Type",
            "type": "Attribute"
          },
          "type": "string"
        }
      }
    },
    "Experimenter": {
      "title": "Experimenter",
      "description": "This element describes a person who performed an imaging experiment.\n\nThis person may also be a user of the OME system, in which case the\nUserName element contains their login name. Experimenters may belong\nto one or more groups which are specified using one or more\nExperimenterGroupRef elements.\n\n:ivar annotation_ref:\n:ivar id:\n:ivar first_name: First name, sometime called christian name or\n    given name or forename. [plain text string]\n:ivar middle_name: Any other names. [plain text string]\n:ivar last_name: A person's last name sometimes called surname or\n    family name. [plain text string]\n:ivar email: A person's email address. [valid email address as\n    string]\n:ivar institution: A person's Institution The organizing structure\n    that people belong to other than groups.  A university, or\n    company, etc. We do not specify a department element, and do not\n    mean for Institution to be used in this way. We simply wish to\n    say XXX at YYY.  Where YYY has a better chance of being tied to\n    a geographically fixed location and of being more recognizable\n    than a group of experimenters. [plain text string]\n:ivar user_name: This is the username of the experimenter (in a\n    'unix' or 'database' sense). [plain text string]",
      "type": "object",
      "properties": {
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)"
          },
          "type": "string"
        },
        "first_name": {
          "title": "First Name",
          "metadata": {
            "name": "FirstName",
            "type": "Attribute"
          },
          "type": "string"
        },
        "middle_name": {
          "title": "Middle Name",
          "metadata": {
            "name": "MiddleName",
            "type": "Attribute"
          },
          "type": "string"
        },
        "last_name": {
          "title": "Last Name",
          "metadata": {
            "name": "LastName",
            "type": "Attribute"
          },
          "type": "string"
        },
        "email": {
          "title": "Email",
          "metadata": {
            "name": "Email",
            "type": "Attribute"
          },
          "type": "string"
        },
        "institution": {
          "title": "Institution",
          "metadata": {
            "name": "Institution",
            "type": "Attribute"
          },
          "type": "string"
        },
        "user_name": {
          "title": "User Name",
          "metadata": {
            "name": "UserName",
            "type": "Attribute"
          },
          "type": "string"
        }
      }
    },
    "Leader": {
      "title": "Leader",
      "description": "Contact information for a ExperimenterGroup leader specified using a reference\nto an Experimenter element defined elsewhere in the document.",
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "ExperimenterGroup": {
      "title": "ExperimenterGroup",
      "description": "The ExperimenterGroupID is required.\n\nInformation should ideally be specified for at least one Leader as a\ncontact for the group. The Leaders are themselves Experimenters.\n\n:ivar description: A description for the group. [plain-text multi-\n    line string]\n:ivar experimenter_ref:\n:ivar leader:\n:ivar annotation_ref:\n:ivar name:\n:ivar id:",
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "experimenter_ref": {
          "title": "Experimenter Ref",
          "metadata": {
            "name": "ExperimenterRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExperimenterRef"
          }
        },
        "leader": {
          "title": "Leader",
          "metadata": {
            "name": "Leader",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Leader"
          }
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "name": {
          "title": "Name",
          "metadata": {
            "name": "Name",
            "type": "Attribute"
          },
          "type": "string"
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:ExperimenterGroup:\\S+)|(ExperimenterGroup:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:ExperimenterGroup:\\S+)|(ExperimenterGroup:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "MicroscopeType": {
      "title": "MicroscopeType",
      "description": "An enumeration.",
      "enum": [
        "Upright",
        "Inverted",
        "Dissection",
        "Electrophysiology",
        "Other"
      ]
    },
    "Microscope": {
      "title": "Microscope",
      "description": "The microscope's manufacturer specification.",
      "type": "object",
      "properties": {
        "manufacturer": {
          "title": "Manufacturer",
          "metadata": {
            "name": "Manufacturer",
            "type": "Attribute"
          },
          "type": "string"
        },
        "model": {
          "title": "Model",
          "metadata": {
            "name": "Model",
            "type": "Attribute"
          },
          "type": "string"
        },
        "serial_number": {
          "title": "Serial Number",
          "metadata": {
            "name": "SerialNumber",
            "type": "Attribute"
          },
          "type": "string"
        },
        "lot_number": {
          "title": "Lot Number",
          "metadata": {
            "name": "LotNumber",
            "type": "Attribute"
          },
          "type": "string"
        },
        "type_value": {
          "metadata": {
            "name": "Type",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/MicroscopeType"
            }
          ]
        }
      }
    },
    "UnitsPower": {
      "title": "UnitsPower",
      "description": "The units used to represent power.\n\n:cvar YW: yottawatt unit.\n:cvar ZW: zettawatt unit.\n:cvar EW: exawatt unit.\n:cvar PW: petawatt unit.\n:cvar TW: terawatt unit.\n:cvar GW: gigawatt unit.\n:cvar MW: megawatt unit.\n:cvar K_W: kilowatt unit.\n:cvar H_W: hectowatt unit.\n:cvar DA_W: decawatt unit.\n:cvar W: watt unit.\n:cvar D_W: deciwatt unit.\n:cvar C_W: centiwatt unit.\n:cvar M_W_1: milliwatt unit.\n:cvar W_1: microwatt unit.\n:cvar N_W: nanowatt unit.\n:cvar P_W_1: picowatt unit.\n:cvar F_W: femtowatt unit.\n:cvar A_W: attowatt unit.\n:cvar Z_W_1: zeptowatt unit.\n:cvar Y_W_1: yoctowatt unit.",
      "enum": [
        "YW",
        "ZW",
        "EW",
        "PW",
        "TW",
        "GW",
        "MW",
        "kW",
        "hW",
        "daW",
        "W",
        "dW",
        "cW",
        "mW",
        "\u00b5W",
        "nW",
        "pW",
        "fW",
        "aW",
        "zW",
        "yW"
      ]
    },
    "M": {
      "title": "M",
      "type": "object",
      "properties": {
        "value": {
          "title": "Value",
          "default": "",
          "metadata": {
            "required": true
          },
          "type": "string"
        },
        "k": {
          "title": "K",
          "metadata": {
            "name": "K",
            "type": "Attribute"
          },
          "type": "string"
        }
      }
    },
    "Map": {
      "title": "Map",
      "description": "This is a Mapping of key/value pairs.\n\n:ivar m: This is a key/value pair used to build up a Mapping. The\n    Element and Attribute name are kept to single letters to\n    minimize the length at the expense of readability as they are\n    likely to occur many times.",
      "type": "object",
      "properties": {
        "m": {
          "title": "M",
          "metadata": {
            "name": "M",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/M"
          }
        }
      }
    },
    "GenericExcitationSource": {
      "title": "GenericExcitationSource",
      "description": "The GenericExcitationSource element is used to represent a source as a\ncollection of key/value pairs, stored in a Map.\n\nThe other lightsource objects should always be used in preference to\nthis if possible.",
      "type": "object",
      "properties": {
        "manufacturer": {
          "title": "Manufacturer",
          "metadata": {
            "name": "Manufacturer",
            "type": "Attribute"
          },
          "type": "string"
        },
        "model": {
          "title": "Model",
          "metadata": {
            "name": "Model",
            "type": "Attribute"
          },
          "type": "string"
        },
        "serial_number": {
          "title": "Serial Number",
          "metadata": {
            "name": "SerialNumber",
            "type": "Attribute"
          },
          "type": "string"
        },
        "lot_number": {
          "title": "Lot Number",
          "metadata": {
            "name": "LotNumber",
            "type": "Attribute"
          },
          "type": "string"
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:LightSource:\\S+)|(LightSource:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:LightSource:\\S+)|(LightSource:\\S+)"
          },
          "type": "string"
        },
        "power": {
          "title": "Power",
          "metadata": {
            "name": "Power",
            "type": "Attribute"
          },
          "type": "number"
        },
        "power_unit": {
          "default": "mW",
          "metadata": {
            "name": "PowerUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsPower"
            }
          ]
        },
        "map": {
          "title": "Map",
          "metadata": {
            "name": "Map",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/Map"
            }
          ]
        }
      }
    },
    "LightEmittingDiode": {
      "title": "LightEmittingDiode",
      "description": "The LightEmittingDiode element is used to describe various kinds of LED\nlamps. As the LightEmittingDiode is inside a LightSource it already has\navailable the values from ManufacturerSpec (Manufacturer, Model, SerialNumber,\nLotNumber) And the values from LightSource which includes Power in milliwatts\nWe have looked at extending this element but have had a problem producing a\ngeneric solution.\n\nPossible attributes talked about adding include:\nPower in lumens - but this is complicated by multi-channel\ndevices like CoolLED where each channel's power is different\nWavelength Range - not a simple value so would require\nmultiple attributes or a child element\nAngle of Projection - this would be further affected by the\noptics used for filtering the naked LED or that combine\npower from multiple devices\nThese values are further affected if you over-drive the LED\nresulting in a more complex system\nAnother issue is that LED's may not be used directly for\nillumination but as drivers for secondary emissions from doped\nfiber optics. This would require the fiber optics to be modeled.\nThanks to Paul Goodwin of Applied Precision of information about\nthis topic.",
      "type": "object",
      "properties": {
        "manufacturer": {
          "title": "Manufacturer",
          "metadata": {
            "name": "Manufacturer",
            "type": "Attribute"
          },
          "type": "string"
        },
        "model": {
          "title": "Model",
          "metadata": {
            "name": "Model",
            "type": "Attribute"
          },
          "type": "string"
        },
        "serial_number": {
          "title": "Serial Number",
          "metadata": {
            "name": "SerialNumber",
            "type": "Attribute"
          },
          "type": "string"
        },
        "lot_number": {
          "title": "Lot Number",
          "metadata": {
            "name": "LotNumber",
            "type": "Attribute"
          },
          "type": "string"
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:LightSource:\\S+)|(LightSource:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:LightSource:\\S+)|(LightSource:\\S+)"
          },
          "type": "string"
        },
        "power": {
          "title": "Power",
          "metadata": {
            "name": "Power",
            "type": "Attribute"
          },
          "type": "number"
        },
        "power_unit": {
          "default": "mW",
          "metadata": {
            "name": "PowerUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsPower"
            }
          ]
        }
      }
    },
    "FilamentType": {
      "title": "FilamentType",
      "description": "An enumeration.",
      "enum": [
        "Incandescent",
        "Halogen",
        "Other"
      ]
    },
    "Filament": {
      "title": "Filament",
      "description": "The Filament element is used to describe various kinds of filament bulbs\nsuch as Incadescent or Halogen.\n\nThe Power of the Filament is now stored in the LightSource.\n\n:ivar type_value: The type of filament.",
      "type": "object",
      "properties": {
        "manufacturer": {
          "title": "Manufacturer",
          "metadata": {
            "name": "Manufacturer",
            "type": "Attribute"
          },
          "type": "string"
        },
        "model": {
          "title": "Model",
          "metadata": {
            "name": "Model",
            "type": "Attribute"
          },
          "type": "string"
        },
        "serial_number": {
          "title": "Serial Number",
          "metadata": {
            "name": "SerialNumber",
            "type": "Attribute"
          },
          "type": "string"
        },
        "lot_number": {
          "title": "Lot Number",
          "metadata": {
            "name": "LotNumber",
            "type": "Attribute"
          },
          "type": "string"
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:LightSource:\\S+)|(LightSource:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:LightSource:\\S+)|(LightSource:\\S+)"
          },
          "type": "string"
        },
        "power": {
          "title": "Power",
          "metadata": {
            "name": "Power",
            "type": "Attribute"
          },
          "type": "number"
        },
        "power_unit": {
          "default": "mW",
          "metadata": {
            "name": "PowerUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsPower"
            }
          ]
        },
        "type_value": {
          "metadata": {
            "name": "Type",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/FilamentType"
            }
          ]
        }
      }
    },
    "ArcType": {
      "title": "ArcType",
      "description": "An enumeration.",
      "enum": [
        "Hg",
        "Xe",
        "HgXe",
        "Other"
      ]
    },
    "Arc": {
      "title": "Arc",
      "description": "The Arc element is used to describe various kinds of Arc lamps - Hg, Xe, HgXe.\nThe Power of the Arc is now stored in the LightSource.\n\n:ivar type_value: The type of Arc lamp.",
      "type": "object",
      "properties": {
        "manufacturer": {
          "title": "Manufacturer",
          "metadata": {
            "name": "Manufacturer",
            "type": "Attribute"
          },
          "type": "string"
        },
        "model": {
          "title": "Model",
          "metadata": {
            "name": "Model",
            "type": "Attribute"
          },
          "type": "string"
        },
        "serial_number": {
          "title": "Serial Number",
          "metadata": {
            "name": "SerialNumber",
            "type": "Attribute"
          },
          "type": "string"
        },
        "lot_number": {
          "title": "Lot Number",
          "metadata": {
            "name": "LotNumber",
            "type": "Attribute"
          },
          "type": "string"
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:LightSource:\\S+)|(LightSource:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:LightSource:\\S+)|(LightSource:\\S+)"
          },
          "type": "string"
        },
        "power": {
          "title": "Power",
          "metadata": {
            "name": "Power",
            "type": "Attribute"
          },
          "type": "number"
        },
        "power_unit": {
          "default": "mW",
          "metadata": {
            "name": "PowerUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsPower"
            }
          ]
        },
        "type_value": {
          "metadata": {
            "name": "Type",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ArcType"
            }
          ]
        }
      }
    },
    "Pump": {
      "title": "Pump",
      "description": "The Pump element is a reference to a LightSource.\n\nIt is used within the Laser element to specify the light source for\nthe laser's pump (if any).",
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:LightSource:\\S+)|(LightSource:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:LightSource:\\S+)|(LightSource:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "LaserType": {
      "title": "LaserType",
      "description": "An enumeration.",
      "enum": [
        "Excimer",
        "Gas",
        "MetalVapor",
        "SolidState",
        "Dye",
        "Semiconductor",
        "FreeElectron",
        "Other"
      ]
    },
    "LaserLaserMedium": {
      "title": "LaserLaserMedium",
      "description": "An enumeration.",
      "enum": [
        "Cu",
        "Ag",
        "ArFl",
        "ArCl",
        "KrFl",
        "KrCl",
        "XeFl",
        "XeCl",
        "XeBr",
        "N",
        "Ar",
        "Kr",
        "Xe",
        "HeNe",
        "HeCd",
        "CO",
        "CO2",
        "H2O",
        "HFl",
        "NdGlass",
        "NdYAG",
        "ErGlass",
        "ErYAG",
        "HoYLF",
        "HoYAG",
        "Ruby",
        "TiSapphire",
        "Alexandrite",
        "Rhodamine6G",
        "CoumarinC30",
        "GaAs",
        "GaAlAs",
        "EMinus",
        "Other"
      ]
    },
    "LaserPulse": {
      "title": "LaserPulse",
      "description": "An enumeration.",
      "enum": [
        "CW",
        "Single",
        "QSwitched",
        "Repetitive",
        "ModeLocked",
        "Other"
      ]
    },
    "UnitsFrequency": {
      "title": "UnitsFrequency",
      "description": "The units used to represent frequency.\n\n:cvar YHZ: yottahertz unit.\n:cvar ZHZ: zettahertz unit.\n:cvar EHZ: exahertz unit.\n:cvar PHZ: petahertz unit.\n:cvar THZ: terahertz unit.\n:cvar GHZ: gigahertz unit.\n:cvar MHZ: megahertz unit.\n:cvar K_HZ: kilohertz unit.\n:cvar H_HZ: hectohertz unit.\n:cvar DA_HZ: decahertz unit.\n:cvar HZ: hertz unit.\n:cvar D_HZ: decihertz unit.\n:cvar C_HZ: centihertz unit.\n:cvar M_HZ_1: millihertz unit.\n:cvar HZ_1: microhertz unit.\n:cvar N_HZ: nanohertz unit.\n:cvar P_HZ_1: picohertz unit.\n:cvar F_HZ: femtohertz unit.\n:cvar A_HZ: attohertz unit.\n:cvar Z_HZ_1: zeptohertz unit.\n:cvar Y_HZ_1: yoctohertz unit.",
      "enum": [
        "YHz",
        "ZHz",
        "EHz",
        "PHz",
        "THz",
        "GHz",
        "MHz",
        "kHz",
        "hHz",
        "daHz",
        "Hz",
        "dHz",
        "cHz",
        "mHz",
        "\u00b5Hz",
        "nHz",
        "pHz",
        "fHz",
        "aHz",
        "zHz",
        "yHz"
      ]
    },
    "Laser": {
      "title": "Laser",
      "description": "Laser types are specified using two attributes - the Type and the LaserMedium.\n\n:ivar pump: The Laser element may contain a Pump sub-element which\n    refers to a LightSource used as a laser pump.\n:ivar type_value: Type is the general category of laser.\n:ivar laser_medium: The Medium attribute specifies the actual lasing\n    medium for a given laser type.\n:ivar wavelength: The Wavelength of the laser. Units are set by\n    WavelengthUnit.\n:ivar wavelength_unit: The units of the Wavelength -\n    default:nanometres[nm].\n:ivar frequency_multiplication: FrequencyMultiplication that may be\n    specified. [units:none]\n:ivar tuneable: Whether or not the laser is Tuneable [flag]\n:ivar pulse: The Pulse mode of the laser.\n:ivar pockel_cell: If true the laser has a PockelCell to rotate the\n    polarization of the beam. [flag]\n:ivar repetition_rate: The is the rate in Hz at which the laser\n    pulses if the Pulse type is 'Repetitive'. hertz[Hz] Units are\n    set by RepetitionRateUnit.\n:ivar repetition_rate_unit: The units of the RepetitionRate -\n    default:hertz[Hz].",
      "type": "object",
      "properties": {
        "manufacturer": {
          "title": "Manufacturer",
          "metadata": {
            "name": "Manufacturer",
            "type": "Attribute"
          },
          "type": "string"
        },
        "model": {
          "title": "Model",
          "metadata": {
            "name": "Model",
            "type": "Attribute"
          },
          "type": "string"
        },
        "serial_number": {
          "title": "Serial Number",
          "metadata": {
            "name": "SerialNumber",
            "type": "Attribute"
          },
          "type": "string"
        },
        "lot_number": {
          "title": "Lot Number",
          "metadata": {
            "name": "LotNumber",
            "type": "Attribute"
          },
          "type": "string"
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:LightSource:\\S+)|(LightSource:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:LightSource:\\S+)|(LightSource:\\S+)"
          },
          "type": "string"
        },
        "power": {
          "title": "Power",
          "metadata": {
            "name": "Power",
            "type": "Attribute"
          },
          "type": "number"
        },
        "power_unit": {
          "default": "mW",
          "metadata": {
            "name": "PowerUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsPower"
            }
          ]
        },
        "pump": {
          "title": "Pump",
          "metadata": {
            "name": "Pump",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/Pump"
            }
          ]
        },
        "type_value": {
          "metadata": {
            "name": "Type",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/LaserType"
            }
          ]
        },
        "laser_medium": {
          "metadata": {
            "name": "LaserMedium",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/LaserLaserMedium"
            }
          ]
        },
        "wavelength": {
          "title": "Wavelength",
          "exclusiveMinimum": 0.0,
          "metadata": {
            "name": "Wavelength",
            "type": "Attribute",
            "min_exclusive": 0.0
          },
          "type": "number"
        },
        "wavelength_unit": {
          "default": "nm",
          "metadata": {
            "name": "WavelengthUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "frequency_multiplication": {
          "title": "Frequency Multiplication",
          "minimum": 1,
          "metadata": {
            "name": "FrequencyMultiplication",
            "type": "Attribute",
            "min_inclusive": 1
          },
          "type": "integer"
        },
        "tuneable": {
          "title": "Tuneable",
          "metadata": {
            "name": "Tuneable",
            "type": "Attribute"
          },
          "type": "boolean"
        },
        "pulse": {
          "metadata": {
            "name": "Pulse",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/LaserPulse"
            }
          ]
        },
        "pockel_cell": {
          "title": "Pockel Cell",
          "metadata": {
            "name": "PockelCell",
            "type": "Attribute"
          },
          "type": "boolean"
        },
        "repetition_rate": {
          "title": "Repetition Rate",
          "metadata": {
            "name": "RepetitionRate",
            "type": "Attribute"
          },
          "type": "number"
        },
        "repetition_rate_unit": {
          "default": "Hz",
          "metadata": {
            "name": "RepetitionRateUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsFrequency"
            }
          ]
        }
      }
    },
    "UnitsElectricPotential": {
      "title": "UnitsElectricPotential",
      "description": "The units used to represent an electric potential.\n\n:cvar YV: yottavolt unit.\n:cvar ZV: zettavolt unit.\n:cvar EV: exavolt unit.\n:cvar PV: petavolt unit.\n:cvar TV: teravolt unit.\n:cvar GV: gigavolt unit.\n:cvar MV: megavolt unit.\n:cvar K_V: kilovolt unit.\n:cvar H_V: hectovolt unit.\n:cvar DA_V: decavolt unit.\n:cvar V: volt unit.\n:cvar D_V: decivolt unit.\n:cvar C_V: centivolt unit.\n:cvar M_V_1: millivolt unit.\n:cvar V_1: microvolt unit.\n:cvar N_V: nanovolt unit.\n:cvar P_V_1: picovolt unit.\n:cvar F_V: femtovolt unit.\n:cvar A_V: attovolt unit.\n:cvar Z_V_1: zeptovolt unit.\n:cvar Y_V_1: yoctovolt unit.",
      "enum": [
        "YV",
        "ZV",
        "EV",
        "PV",
        "TV",
        "GV",
        "MV",
        "kV",
        "hV",
        "daV",
        "V",
        "dV",
        "cV",
        "mV",
        "\u00b5V",
        "nV",
        "pV",
        "fV",
        "aV",
        "zV",
        "yV"
      ]
    },
    "DetectorType": {
      "title": "DetectorType",
      "description": "An enumeration.",
      "enum": [
        "CCD",
        "IntensifiedCCD",
        "AnalogVideo",
        "PMT",
        "Photodiode",
        "Spectroscopy",
        "LifetimeImaging",
        "CorrelationSpectroscopy",
        "FTIR",
        "EMCCD",
        "APD",
        "CMOS",
        "EBCCD",
        "Other"
      ]
    },
    "Detector": {
      "title": "Detector",
      "description": "The type of detector used to capture the image.\n\nThe Detector ID can be used as a reference within the Channel\nelement in the Image element. The values stored in Detector\nrepresent the fixed values, variable values modified during the\nacquisition go in DetectorSettings Each attribute now has an\nindication of what type of detector it applies to. This is\npreparatory work for cleaning up and possibly splitting this object\ninto sub-types.\n\n:ivar annotation_ref:\n:ivar gain: The Detector Gain for this detector, as a float.\n    [units:none] {used:CCD,EMCCD,PMT}\n:ivar voltage: The Voltage of the detector (e.g. PMT voltage) as a\n    float. {used:PMT} Units are set by VoltageUnit.\n:ivar voltage_unit: The units of the Voltage - default:volts[V].\n:ivar offset: The Detector Offset. [units:none] {used:CCD,EMCCD}\n:ivar zoom: The fixed Zoom for a detector. [units:none] {used:PMT}\n:ivar amplification_gain: Gain applied to the detector signal. This\n    is the electronic gain (as apposed to the inherent gain) that is\n    set for the detector. [units:none] {used:EMCCD#EMGain}\n:ivar id:\n:ivar type_value: The Type of detector. E.g. CCD, PMT, EMCCD etc.",
      "type": "object",
      "properties": {
        "manufacturer": {
          "title": "Manufacturer",
          "metadata": {
            "name": "Manufacturer",
            "type": "Attribute"
          },
          "type": "string"
        },
        "model": {
          "title": "Model",
          "metadata": {
            "name": "Model",
            "type": "Attribute"
          },
          "type": "string"
        },
        "serial_number": {
          "title": "Serial Number",
          "metadata": {
            "name": "SerialNumber",
            "type": "Attribute"
          },
          "type": "string"
        },
        "lot_number": {
          "title": "Lot Number",
          "metadata": {
            "name": "LotNumber",
            "type": "Attribute"
          },
          "type": "string"
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "gain": {
          "title": "Gain",
          "metadata": {
            "name": "Gain",
            "type": "Attribute"
          },
          "type": "number"
        },
        "voltage": {
          "title": "Voltage",
          "metadata": {
            "name": "Voltage",
            "type": "Attribute"
          },
          "type": "number"
        },
        "voltage_unit": {
          "default": "V",
          "metadata": {
            "name": "VoltageUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsElectricPotential"
            }
          ]
        },
        "offset": {
          "title": "Offset",
          "metadata": {
            "name": "Offset",
            "type": "Attribute"
          },
          "type": "number"
        },
        "zoom": {
          "title": "Zoom",
          "metadata": {
            "name": "Zoom",
            "type": "Attribute"
          },
          "type": "number"
        },
        "amplification_gain": {
          "title": "Amplification Gain",
          "metadata": {
            "name": "AmplificationGain",
            "type": "Attribute"
          },
          "type": "number"
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Detector:\\S+)|(Detector:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Detector:\\S+)|(Detector:\\S+)"
          },
          "type": "string"
        },
        "type_value": {
          "metadata": {
            "name": "Type",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/DetectorType"
            }
          ]
        }
      }
    },
    "ObjectiveCorrection": {
      "title": "ObjectiveCorrection",
      "description": "An enumeration.",
      "enum": [
        "UV",
        "PlanApo",
        "PlanFluor",
        "SuperFluor",
        "VioletCorrected",
        "Achro",
        "Achromat",
        "Fluor",
        "Fl",
        "Fluar",
        "Neofluar",
        "Fluotar",
        "Apo",
        "PlanNeofluar",
        "Other"
      ]
    },
    "ObjectiveImmersion": {
      "title": "ObjectiveImmersion",
      "description": "An enumeration.",
      "enum": [
        "Oil",
        "Water",
        "WaterDipping",
        "Air",
        "Multi",
        "Glycerol",
        "Other"
      ]
    },
    "Objective": {
      "title": "Objective",
      "description": "A description of the microscope's objective lens.\n\nRequired elements include the lens numerical aperture,\nand the magnification, both of which a floating\npoint (real) numbers.\nThe values are those that are fixed for a particular\nobjective: either because it has been manufactured to\nthis specification or the value has been measured on\nthis particular objective.\nCorrection: This is the type of correction coating applied to this lens.\nImmersion: This is the types of immersion medium the lens is designed to\nwork with. It is not the same as 'Medium' in ObjectiveRef (a\nsingle type) as here Immersion can have compound values like 'Multi'.\nLensNA: The numerical aperture of the lens (as a float)\nNominalMagnification: The specified magnification e.g. x10\nCalibratedMagnification: The measured magnification e.g. x10.3\nWorkingDistance: WorkingDistance of the lens.\n\n:ivar annotation_ref:\n:ivar id:\n:ivar correction: The correction applied to the lens\n:ivar immersion: The immersion medium the lens is designed for\n:ivar lens_na: The numerical aperture of the lens expressed as a\n    floating point (real) number. Expected range 0.02 - 1.5\n    [units:none]\n:ivar nominal_magnification: The magnification of the lens as\n    specified by the manufacturer - i.e. '60' is a 60X lens.\n    [units:none] Note: The type of this has been changed from int to\n    float to allow the specification of additional lenses e.g. 0.5X\n    lens\n:ivar calibrated_magnification: The magnification of the lens as\n    measured by a calibration process- i.e. '59.987' for a 60X lens.\n    [units:none]\n:ivar working_distance: The working distance of the lens expressed\n    as a floating point (real) number. Units are set by\n    WorkingDistanceUnit.\n:ivar working_distance_unit: The units of the working distance -\n    default:microns[\u00b5m].\n:ivar iris: Records whether or not the objective was fitted with an\n    Iris. [flag]",
      "type": "object",
      "properties": {
        "manufacturer": {
          "title": "Manufacturer",
          "metadata": {
            "name": "Manufacturer",
            "type": "Attribute"
          },
          "type": "string"
        },
        "model": {
          "title": "Model",
          "metadata": {
            "name": "Model",
            "type": "Attribute"
          },
          "type": "string"
        },
        "serial_number": {
          "title": "Serial Number",
          "metadata": {
            "name": "SerialNumber",
            "type": "Attribute"
          },
          "type": "string"
        },
        "lot_number": {
          "title": "Lot Number",
          "metadata": {
            "name": "LotNumber",
            "type": "Attribute"
          },
          "type": "string"
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Objective:\\S+)|(Objective:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Objective:\\S+)|(Objective:\\S+)"
          },
          "type": "string"
        },
        "correction": {
          "metadata": {
            "name": "Correction",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ObjectiveCorrection"
            }
          ]
        },
        "immersion": {
          "metadata": {
            "name": "Immersion",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ObjectiveImmersion"
            }
          ]
        },
        "lens_na": {
          "title": "Lens Na",
          "metadata": {
            "name": "LensNA",
            "type": "Attribute"
          },
          "type": "number"
        },
        "nominal_magnification": {
          "title": "Nominal Magnification",
          "metadata": {
            "name": "NominalMagnification",
            "type": "Attribute"
          },
          "type": "number"
        },
        "calibrated_magnification": {
          "title": "Calibrated Magnification",
          "metadata": {
            "name": "CalibratedMagnification",
            "type": "Attribute"
          },
          "type": "number"
        },
        "working_distance": {
          "title": "Working Distance",
          "metadata": {
            "name": "WorkingDistance",
            "type": "Attribute"
          },
          "type": "number"
        },
        "working_distance_unit": {
          "default": "\u00b5m",
          "metadata": {
            "name": "WorkingDistanceUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "iris": {
          "title": "Iris",
          "metadata": {
            "name": "Iris",
            "type": "Attribute"
          },
          "type": "boolean"
        }
      }
    },
    "FilterRef": {
      "title": "FilterRef",
      "description": "Reference is an empty complex type that is contained and extended by all the\n*Ref elements and also the Settings Complex Type Each *Ref element defines an\nattribute named ID of simple type *ID and no other information Each simple type\n*ID is restricted to the base type LSID with an appropriate pattern.",
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Filter:\\S+)|(Filter:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Filter:\\S+)|(Filter:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "DichroicRef": {
      "title": "DichroicRef",
      "description": "Reference is an empty complex type that is contained and extended by all the\n*Ref elements and also the Settings Complex Type Each *Ref element defines an\nattribute named ID of simple type *ID and no other information Each simple type\n*ID is restricted to the base type LSID with an appropriate pattern.",
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Dichroic:\\S+)|(Dichroic:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Dichroic:\\S+)|(Dichroic:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "FilterSet": {
      "title": "FilterSet",
      "description": "Filter set manufacturer specification.\n\n:ivar excitation_filter_ref: The Filters placed in the Excitation\n    light path.\n:ivar dichroic_ref:\n:ivar emission_filter_ref: The Filters placed in the Emission light\n    path.\n:ivar id:",
      "type": "object",
      "properties": {
        "manufacturer": {
          "title": "Manufacturer",
          "metadata": {
            "name": "Manufacturer",
            "type": "Attribute"
          },
          "type": "string"
        },
        "model": {
          "title": "Model",
          "metadata": {
            "name": "Model",
            "type": "Attribute"
          },
          "type": "string"
        },
        "serial_number": {
          "title": "Serial Number",
          "metadata": {
            "name": "SerialNumber",
            "type": "Attribute"
          },
          "type": "string"
        },
        "lot_number": {
          "title": "Lot Number",
          "metadata": {
            "name": "LotNumber",
            "type": "Attribute"
          },
          "type": "string"
        },
        "excitation_filter_ref": {
          "title": "Excitation Filter Ref",
          "metadata": {
            "name": "ExcitationFilterRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterRef"
          }
        },
        "dichroic_ref": {
          "title": "Dichroic Ref",
          "metadata": {
            "name": "DichroicRef",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/DichroicRef"
            }
          ]
        },
        "emission_filter_ref": {
          "title": "Emission Filter Ref",
          "metadata": {
            "name": "EmissionFilterRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:FilterSet:\\S+)|(FilterSet:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:FilterSet:\\S+)|(FilterSet:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "TransmittanceRange": {
      "title": "TransmittanceRange",
      "description": "This records the range of wavelengths that are transmitted by the filter.\n\nIt also records the maximum amount of light transmitted.\n\n:ivar cut_in: CutIn is the wavelength below which there is less than\n    50% transmittance for a filter. Units are set by CutInUnit.\n:ivar cut_in_unit: The units of the CutIn - default:nanometres[nm].\n:ivar cut_out: CutOut is the wavelength above which there is less\n    than 50% transmittance for a filter. Units are set by\n    CutOutUnit.\n:ivar cut_out_unit: The units of the CutOut -\n    default:nanometres[nm].\n:ivar cut_in_tolerance: CutInTolerance. Units are set by\n    CutInToleranceUnit.\n:ivar cut_in_tolerance_unit: The units of the CutInTolerance -\n    default:nanometres[nm].\n:ivar cut_out_tolerance: CutOutTolerance. Units are set by\n    CutOutToleranceUnit.\n:ivar cut_out_tolerance_unit: The units of the CutOutTolerance -\n    default:nanometres[nm].\n:ivar transmittance: The amount of light the filter transmits at a\n    maximum [units:none] A fraction, as a value from 0.0 to 1.0.",
      "type": "object",
      "properties": {
        "cut_in": {
          "title": "Cut In",
          "exclusiveMinimum": 0.0,
          "metadata": {
            "name": "CutIn",
            "type": "Attribute",
            "min_exclusive": 0.0
          },
          "type": "number"
        },
        "cut_in_unit": {
          "default": "nm",
          "metadata": {
            "name": "CutInUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "cut_out": {
          "title": "Cut Out",
          "exclusiveMinimum": 0.0,
          "metadata": {
            "name": "CutOut",
            "type": "Attribute",
            "min_exclusive": 0.0
          },
          "type": "number"
        },
        "cut_out_unit": {
          "default": "nm",
          "metadata": {
            "name": "CutOutUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "cut_in_tolerance": {
          "title": "Cut In Tolerance",
          "minimum": 0.0,
          "metadata": {
            "name": "CutInTolerance",
            "type": "Attribute",
            "min_inclusive": 0.0
          },
          "type": "number"
        },
        "cut_in_tolerance_unit": {
          "default": "nm",
          "metadata": {
            "name": "CutInToleranceUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "cut_out_tolerance": {
          "title": "Cut Out Tolerance",
          "minimum": 0.0,
          "metadata": {
            "name": "CutOutTolerance",
            "type": "Attribute",
            "min_inclusive": 0.0
          },
          "type": "number"
        },
        "cut_out_tolerance_unit": {
          "default": "nm",
          "metadata": {
            "name": "CutOutToleranceUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "transmittance": {
          "title": "Transmittance",
          "minimum": 0.0,
          "maximum": 1.0,
          "metadata": {
            "name": "Transmittance",
            "type": "Attribute",
            "min_inclusive": 0.0,
            "max_inclusive": 1.0
          },
          "type": "number"
        }
      }
    },
    "FilterType": {
      "title": "FilterType",
      "description": "An enumeration.",
      "enum": [
        "Dichroic",
        "LongPass",
        "ShortPass",
        "BandPass",
        "MultiPass",
        "NeutralDensity",
        "Tuneable",
        "Other"
      ]
    },
    "Filter": {
      "title": "Filter",
      "description": "A filter is either an excitation or emission filters. There should be one\nfilter element specified per wavelength in the image. The channel number\nassociated with a filter set is specified in Channel. It is based on the\nFilterSpec type, so has the required attributes Manufacturer, Model, and\nLotNumber. It may also contain a Type attribute which may be set to 'LongPass',\n'ShortPass', 'BandPass', 'MultiPass',\n\n'Dichroic', 'NeutralDensity', 'Tuneable' or 'Other'.\nIt can be associated with an optional FilterWheel - Note: this is not the same as a FilterSet\n\n:ivar transmittance_range:\n:ivar annotation_ref:\n:ivar type_value:\n:ivar filter_wheel: A filter 'wheel' in OME can refer to any\n    arrangement of filters in a filter holder of any shape. It\n    could, for example, be a filter slider. [plain text string]\n:ivar id:",
      "type": "object",
      "properties": {
        "manufacturer": {
          "title": "Manufacturer",
          "metadata": {
            "name": "Manufacturer",
            "type": "Attribute"
          },
          "type": "string"
        },
        "model": {
          "title": "Model",
          "metadata": {
            "name": "Model",
            "type": "Attribute"
          },
          "type": "string"
        },
        "serial_number": {
          "title": "Serial Number",
          "metadata": {
            "name": "SerialNumber",
            "type": "Attribute"
          },
          "type": "string"
        },
        "lot_number": {
          "title": "Lot Number",
          "metadata": {
            "name": "LotNumber",
            "type": "Attribute"
          },
          "type": "string"
        },
        "transmittance_range": {
          "title": "Transmittance Range",
          "metadata": {
            "name": "TransmittanceRange",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/TransmittanceRange"
            }
          ]
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "type_value": {
          "metadata": {
            "name": "Type",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/FilterType"
            }
          ]
        },
        "filter_wheel": {
          "title": "Filter Wheel",
          "metadata": {
            "name": "FilterWheel",
            "type": "Attribute"
          },
          "type": "string"
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Filter:\\S+)|(Filter:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Filter:\\S+)|(Filter:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "Dichroic": {
      "title": "Dichroic",
      "description": "The dichromatic beamsplitter or dichroic mirror used for this filter\ncombination.",
      "type": "object",
      "properties": {
        "manufacturer": {
          "title": "Manufacturer",
          "metadata": {
            "name": "Manufacturer",
            "type": "Attribute"
          },
          "type": "string"
        },
        "model": {
          "title": "Model",
          "metadata": {
            "name": "Model",
            "type": "Attribute"
          },
          "type": "string"
        },
        "serial_number": {
          "title": "Serial Number",
          "metadata": {
            "name": "SerialNumber",
            "type": "Attribute"
          },
          "type": "string"
        },
        "lot_number": {
          "title": "Lot Number",
          "metadata": {
            "name": "LotNumber",
            "type": "Attribute"
          },
          "type": "string"
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Dichroic:\\S+)|(Dichroic:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Dichroic:\\S+)|(Dichroic:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "Instrument": {
      "title": "Instrument",
      "description": "This element describes the instrument used to capture the Image.\n\nIt is primarily a container for manufacturer's model and catalog\nnumbers for the Microscope, LightSource, Detector, Objective and\nFilters components. The Objective element contains the additional\nelements LensNA and Magnification. The Filters element can be\ncomposed either of separate excitation, emission filters and a\ndichroic mirror or a single filter set. Within the Image itself, a\nreference is made to this one Filter element. There may be multiple\nlight sources, detectors, objectives and filters on a microscope.\nEach of these has their own ID attribute, which can be referred to\nfrom Channel. It is understood that the light path configuration can\nbe different for each channel, but cannot be different for each\ntimepoint or each plane of an XYZ stack.",
      "type": "object",
      "properties": {
        "microscope": {
          "title": "Microscope",
          "metadata": {
            "name": "Microscope",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/Microscope"
            }
          ]
        },
        "generic_excitation_source": {
          "title": "Generic Excitation Source",
          "metadata": {
            "name": "GenericExcitationSource",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/GenericExcitationSource"
          }
        },
        "light_emitting_diode": {
          "title": "Light Emitting Diode",
          "metadata": {
            "name": "LightEmittingDiode",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/LightEmittingDiode"
          }
        },
        "filament": {
          "title": "Filament",
          "metadata": {
            "name": "Filament",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Filament"
          }
        },
        "arc": {
          "title": "Arc",
          "metadata": {
            "name": "Arc",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Arc"
          }
        },
        "laser": {
          "title": "Laser",
          "metadata": {
            "name": "Laser",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Laser"
          }
        },
        "detector": {
          "title": "Detector",
          "metadata": {
            "name": "Detector",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Detector"
          }
        },
        "objective": {
          "title": "Objective",
          "metadata": {
            "name": "Objective",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Objective"
          }
        },
        "filter_set": {
          "title": "Filter Set",
          "metadata": {
            "name": "FilterSet",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterSet"
          }
        },
        "filter": {
          "title": "Filter",
          "metadata": {
            "name": "Filter",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Filter"
          }
        },
        "dichroic": {
          "title": "Dichroic",
          "metadata": {
            "name": "Dichroic",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Dichroic"
          }
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Instrument:\\S+)|(Instrument:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Instrument:\\S+)|(Instrument:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "ExperimentRef": {
      "title": "ExperimentRef",
      "description": "Reference is an empty complex type that is contained and extended by all the\n*Ref elements and also the Settings Complex Type Each *Ref element defines an\nattribute named ID of simple type *ID and no other information Each simple type\n*ID is restricted to the base type LSID with an appropriate pattern.",
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experiment:\\S+)|(Experiment:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experiment:\\S+)|(Experiment:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "InstrumentRef": {
      "title": "InstrumentRef",
      "description": "This empty element can be used (via the required Instrument ID attribute) to\nrefer to an Instrument defined within OME.",
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Instrument:\\S+)|(Instrument:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Instrument:\\S+)|(Instrument:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "ObjectiveSettingsMedium": {
      "title": "ObjectiveSettingsMedium",
      "description": "A description of a Medium used for the lens.\n\nThe Medium is the actual immersion medium used in this case.",
      "enum": [
        "Air",
        "Oil",
        "Water",
        "Glycerol",
        "Other"
      ]
    },
    "ObjectiveSettings": {
      "title": "ObjectiveSettings",
      "description": "This holds the setting applied to an objective as well as a reference to the\nobjective.\n\nThe ID is the objective used in this case.\n\n:ivar id:\n:ivar correction_collar: The CorrectionCollar is normally an\n    adjustable ring on the objective. Each has an arbitrary scale on\n    it so the values is unit-less. [units:none]\n:ivar medium:\n:ivar refractive_index: The RefractiveIndex is that of the immersion\n    medium. This is a ratio so it also unit-less. [units:none]",
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Objective:\\S+)|(Objective:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Objective:\\S+)|(Objective:\\S+)"
          },
          "type": "string"
        },
        "correction_collar": {
          "title": "Correction Collar",
          "metadata": {
            "name": "CorrectionCollar",
            "type": "Attribute"
          },
          "type": "number"
        },
        "medium": {
          "metadata": {
            "name": "Medium",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ObjectiveSettingsMedium"
            }
          ]
        },
        "refractive_index": {
          "title": "Refractive Index",
          "metadata": {
            "name": "RefractiveIndex",
            "type": "Attribute"
          },
          "type": "number"
        }
      }
    },
    "UnitsTemperature": {
      "title": "UnitsTemperature",
      "description": "The units used to represent a temperature.\n\n:cvar C: degree Celsius unit.\n:cvar F: degree Fahrenheit unit.\n:cvar K: Kelvin unit.\n:cvar R: degree Rankine unit.",
      "enum": [
        "\u00b0C",
        "\u00b0F",
        "K",
        "\u00b0R"
      ]
    },
    "UnitsPressure": {
      "title": "UnitsPressure",
      "description": "The units used to represent a pressure.\n\n:cvar YPA: yottapascal SI unit.\n:cvar ZPA: zettapascal SI unit.\n:cvar EPA: exapascal SI unit.\n:cvar PPA: petapascal SI unit.\n:cvar TPA: terapascal SI unit.\n:cvar GPA: gigapascal SI unit.\n:cvar MPA: megapascal SI unit.\n:cvar K_PA: kilopascal SI unit.\n:cvar H_PA: hectopascal SI unit.\n:cvar DA_PA: decapascal SI unit.\n:cvar PA: pascal SI unit.  Note the C++ enum is mixed case due to\n    PASCAL being a macro used by the Microsoft C and C++ compiler.\n:cvar D_PA: decipascal SI unit.\n:cvar C_PA: centipascal SI unit.\n:cvar M_PA_1: millipascal SI unit.\n:cvar PA_1: micropascal SI unit.\n:cvar N_PA: nanopascal SI unit.\n:cvar P_PA_1: picopascal SI unit.\n:cvar F_PA: femtopascal SI unit.\n:cvar A_PA: attopascal SI unit.\n:cvar Z_PA_1: zeptopascal SI unit.\n:cvar Y_PA_1: yoctopascal SI unit.\n:cvar BAR: bar SI-derived unit.\n:cvar MBAR: megabar SI-derived unit.\n:cvar KBAR: kilobar SI-derived unit.\n:cvar DBAR: decibar SI-derived unit.\n:cvar CBAR: centibar SI-derived unit.\n:cvar MBAR_1: millibar SI-derived unit.\n:cvar ATM: standard atmosphere SI-derived unit.\n:cvar PSI: pound-force per square inch Imperial unit.\n:cvar TORR: torr SI-derived unit.\n:cvar M_TORR: millitorr SI-derived unit.\n:cvar MM_HG: millimetre of mercury SI-derived unit",
      "enum": [
        "YPa",
        "ZPa",
        "EPa",
        "PPa",
        "TPa",
        "GPa",
        "MPa",
        "kPa",
        "hPa",
        "daPa",
        "Pa",
        "dPa",
        "cPa",
        "mPa",
        "\u00b5Pa",
        "nPa",
        "pPa",
        "fPa",
        "aPa",
        "zPa",
        "yPa",
        "bar",
        "Mbar",
        "kbar",
        "dbar",
        "cbar",
        "mbar",
        "atm",
        "psi",
        "Torr",
        "mTorr",
        "mm Hg"
      ]
    },
    "ImagingEnvironment": {
      "title": "ImagingEnvironment",
      "description": "This describes the environment that the biological sample was in during the\nexperiment.\n\n:ivar map:\n:ivar temperature: The Temperature is the define units.\n:ivar temperature_unit: The units the Temperature is in -\n    default:Celsius[\u00b0C].\n:ivar air_pressure: AirPressure is the define units.\n:ivar air_pressure_unit: The units the AirPressure is in -\n    default:millibars[mbar].\n:ivar humidity: Humidity around the sample [units:none] A fraction,\n    as a value from 0.0 to 1.0.\n:ivar co2_percent: Carbon Dioxide concentration around the sample\n    [units:none] A fraction, as a value from 0.0 to 1.0.",
      "type": "object",
      "properties": {
        "map": {
          "title": "Map",
          "metadata": {
            "name": "Map",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/Map"
            }
          ]
        },
        "temperature": {
          "title": "Temperature",
          "metadata": {
            "name": "Temperature",
            "type": "Attribute"
          },
          "type": "number"
        },
        "temperature_unit": {
          "default": "\u00b0C",
          "metadata": {
            "name": "TemperatureUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsTemperature"
            }
          ]
        },
        "air_pressure": {
          "title": "Air Pressure",
          "metadata": {
            "name": "AirPressure",
            "type": "Attribute"
          },
          "type": "number"
        },
        "air_pressure_unit": {
          "default": "mbar",
          "metadata": {
            "name": "AirPressureUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsPressure"
            }
          ]
        },
        "humidity": {
          "title": "Humidity",
          "minimum": 0.0,
          "maximum": 1.0,
          "metadata": {
            "name": "Humidity",
            "type": "Attribute",
            "min_inclusive": 0.0,
            "max_inclusive": 1.0
          },
          "type": "number"
        },
        "co2_percent": {
          "title": "Co2 Percent",
          "minimum": 0.0,
          "maximum": 1.0,
          "metadata": {
            "name": "CO2Percent",
            "type": "Attribute",
            "min_inclusive": 0.0,
            "max_inclusive": 1.0
          },
          "type": "number"
        }
      }
    },
    "StageLabel": {
      "title": "StageLabel",
      "description": "The StageLabel is used to specify a name and position for a stage position in\nthe microscope's reference frame.\n\n:ivar name:\n:ivar x: The X position of the stage label. Units are set by XUnit.\n:ivar xunit: The units of the X stage position - default:[reference\n    frame].\n:ivar y: The Y position of the stage label. Units are set by YUnit.\n:ivar yunit: The units of the Y stage position - default:[reference\n    frame].\n:ivar z: The Z position of the stage label. Units are set by ZUnit.\n:ivar zunit: The units of the Z  stage position - default:[reference\n    frame].",
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "metadata": {
            "name": "Name",
            "type": "Attribute",
            "required": true
          },
          "type": "string"
        },
        "x": {
          "title": "X",
          "metadata": {
            "name": "X",
            "type": "Attribute"
          },
          "type": "number"
        },
        "xunit": {
          "default": "reference frame",
          "metadata": {
            "name": "XUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "y": {
          "title": "Y",
          "metadata": {
            "name": "Y",
            "type": "Attribute"
          },
          "type": "number"
        },
        "yunit": {
          "default": "reference frame",
          "metadata": {
            "name": "YUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "z": {
          "title": "Z",
          "metadata": {
            "name": "Z",
            "type": "Attribute"
          },
          "type": "number"
        },
        "zunit": {
          "default": "reference frame",
          "metadata": {
            "name": "ZUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        }
      }
    },
    "Binning": {
      "title": "Binning",
      "description": "Represents the number of pixels that are combined to form larger pixels.\n\n{used:CCD,EMCCD}\n\n:cvar VALUE_1X1: No binning.\n:cvar VALUE_2X2: 2\u00d72 binning.\n:cvar VALUE_4X4: 4\u00d74 binning.\n:cvar VALUE_8X8: 8\u00d78 binning.\n:cvar OTHER: Other binning value.",
      "enum": [
        "1x1",
        "2x2",
        "4x4",
        "8x8",
        "Other"
      ]
    },
    "DetectorSettings": {
      "title": "DetectorSettings",
      "description": "This holds the setting applied to a detector as well as a reference to the\ndetector.\n\nThe ID is the detector used in this case. The values stored in\nDetectorSettings represent the variable values, fixed values not\nmodified during the acquisition go in Detector. Each attribute now\nhas an indication of what type of detector it applies to. This is\npreparatory work for cleaning up and possibly splitting this object\ninto sub-types.\n\n:ivar id:\n:ivar offset: The Offset of the detector. [units none]\n    {used:CCD,EMCCD}\n:ivar gain: The Gain of the detector. [units:none]\n    {used:CCD,EMCCD,PMT}\n:ivar voltage: The Voltage of the detector. {used:PMT} Units are set\n    by VoltageUnit.\n:ivar voltage_unit: The units of the Voltage of the detector -\n    default:volts[V]\n:ivar zoom: The Zoom or \"Confocal Zoom\" or \"Scan Zoom\" for a\n    detector. [units:none] {used:PMT}\n:ivar read_out_rate: The speed at which the detector can count\n    pixels.  {used:CCD,EMCCD} This is the bytes per second that can\n    be read from the detector (like a baud rate). Units are set by\n    ReadOutRateUnit.\n:ivar read_out_rate_unit: The units of the ReadOutRate -\n    default:megahertz[Hz].\n:ivar binning: Represents the number of pixels that are combined to\n    form larger pixels. {used:CCD,EMCCD}\n:ivar integration: This is the number of sequential frames that get\n    averaged, to improve the signal-to-noise ratio. [units:none]\n    {used:CCD,EMCCD}",
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Detector:\\S+)|(Detector:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Detector:\\S+)|(Detector:\\S+)"
          },
          "type": "string"
        },
        "offset": {
          "title": "Offset",
          "metadata": {
            "name": "Offset",
            "type": "Attribute"
          },
          "type": "number"
        },
        "gain": {
          "title": "Gain",
          "metadata": {
            "name": "Gain",
            "type": "Attribute"
          },
          "type": "number"
        },
        "voltage": {
          "title": "Voltage",
          "metadata": {
            "name": "Voltage",
            "type": "Attribute"
          },
          "type": "number"
        },
        "voltage_unit": {
          "default": "V",
          "metadata": {
            "name": "VoltageUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsElectricPotential"
            }
          ]
        },
        "zoom": {
          "title": "Zoom",
          "metadata": {
            "name": "Zoom",
            "type": "Attribute"
          },
          "type": "number"
        },
        "read_out_rate": {
          "title": "Read Out Rate",
          "metadata": {
            "name": "ReadOutRate",
            "type": "Attribute"
          },
          "type": "number"
        },
        "read_out_rate_unit": {
          "default": "MHz",
          "metadata": {
            "name": "ReadOutRateUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsFrequency"
            }
          ]
        },
        "binning": {
          "metadata": {
            "name": "Binning",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/Binning"
            }
          ]
        },
        "integration": {
          "title": "Integration",
          "minimum": 1,
          "metadata": {
            "name": "Integration",
            "type": "Attribute",
            "min_inclusive": 1
          },
          "type": "integer"
        }
      }
    },
    "FilterSetRef": {
      "title": "FilterSetRef",
      "description": "Reference is an empty complex type that is contained and extended by all the\n*Ref elements and also the Settings Complex Type Each *Ref element defines an\nattribute named ID of simple type *ID and no other information Each simple type\n*ID is restricted to the base type LSID with an appropriate pattern.",
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:FilterSet:\\S+)|(FilterSet:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:FilterSet:\\S+)|(FilterSet:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "LightPath": {
      "title": "LightPath",
      "description": "A description of the light path.\n\n:ivar excitation_filter_ref: The Filters placed in the Excitation\n    light path.\n:ivar dichroic_ref:\n:ivar emission_filter_ref: The Filters placed in the Emission light\n    path.\n:ivar annotation_ref:",
      "type": "object",
      "properties": {
        "excitation_filter_ref": {
          "title": "Excitation Filter Ref",
          "metadata": {
            "name": "ExcitationFilterRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterRef"
          }
        },
        "dichroic_ref": {
          "title": "Dichroic Ref",
          "metadata": {
            "name": "DichroicRef",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/DichroicRef"
            }
          ]
        },
        "emission_filter_ref": {
          "title": "Emission Filter Ref",
          "metadata": {
            "name": "EmissionFilterRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterRef"
          }
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        }
      }
    },
    "ChannelIlluminationType": {
      "title": "ChannelIlluminationType",
      "description": "An enumeration.",
      "enum": [
        "Transmitted",
        "Epifluorescence",
        "Oblique",
        "NonLinear",
        "Other"
      ]
    },
    "ChannelAcquisitionMode": {
      "title": "ChannelAcquisitionMode",
      "description": "An enumeration.",
      "enum": [
        "WideField",
        "LaserScanningConfocalMicroscopy",
        "SpinningDiskConfocal",
        "SlitScanConfocal",
        "MultiPhotonMicroscopy",
        "StructuredIllumination",
        "SingleMoleculeImaging",
        "TotalInternalReflection",
        "FluorescenceLifetime",
        "SpectralImaging",
        "FluorescenceCorrelationSpectroscopy",
        "NearFieldScanningOpticalMicroscopy",
        "SecondHarmonicGenerationImaging",
        "PALM",
        "STORM",
        "STED",
        "TIRF",
        "FSM",
        "LCM",
        "Other",
        "BrightField",
        "SweptFieldConfocal",
        "SPIM"
      ]
    },
    "ChannelContrastMethod": {
      "title": "ChannelContrastMethod",
      "description": "An enumeration.",
      "enum": [
        "Brightfield",
        "Phase",
        "DIC",
        "HoffmanModulation",
        "ObliqueIllumination",
        "PolarizedLight",
        "Darkfield",
        "Fluorescence",
        "Other"
      ]
    },
    "Channel": {
      "title": "Channel",
      "description": "There must be one per channel in the Image, even for a single-plane image.\nAnd information about how each of them was acquired is stored in the various\noptional *Ref elements.  Each Logical Channel is composed of one or more\nChannelComponents.  For example, an entire spectrum in an FTIR experiment may\nbe stored in a single Logical Channel with each discrete wavenumber of the\nspectrum.\n\nconstituting a ChannelComponent of the FTIR Logical Channel.  An RGB image where the Red, Green and Blue components do not reflect discrete probes but are\ninstead the output of a color camera would be treated similarly - one Logical channel with three ChannelComponents in this case.\nThe total number of ChannelComponents for a set of pixels must equal SizeC.\nThe IlluminationType attribute is a string enumeration which may be set to 'Transmitted', 'Epifluorescence', 'Oblique', or 'NonLinear'.\nThe user interface logic for labeling a given channel for the user should use the first existing attribute in the following sequence:\nName -&gt; Fluor -&gt; EmissionWavelength -&gt; ChannelComponent/Index.\n\n:ivar light_source_settings:\n:ivar detector_settings:\n:ivar filter_set_ref:\n:ivar annotation_ref:\n:ivar light_path:\n:ivar id:\n:ivar name: A name for the channel that is suitable for presentation\n    to the user.\n:ivar samples_per_pixel: The number of samples the detector takes to\n    form each pixel value. [units:none] Note: This is not the same\n    as \"Frame Averaging\" - see Integration in DetectorSettings\n:ivar illumination_type: The method of illumination used to capture\n    the channel.\n:ivar pinhole_size: The optional PinholeSize attribute allows\n    specifying adjustable pin hole diameters for confocal\n    microscopes. Units are set by PinholeSizeUnit.\n:ivar pinhole_size_unit: The units of the pin hole diameter for\n    confocal microscopes - default:microns[\u00b5m].\n:ivar acquisition_mode: AcquisitionMode describes the type of\n    microscopy performed for each channel\n:ivar contrast_method: ContrastMethod describes the technique used\n    to achieve contrast for each channel\n:ivar excitation_wavelength: Wavelength of excitation for a\n    particular channel. Units are set by ExcitationWavelengthUnit.\n:ivar excitation_wavelength_unit: The units of the wavelength of\n    excitation - default:nanometres[nm].\n:ivar emission_wavelength: Wavelength of emission for a particular\n    channel. Units are set by EmissionWavelengthUnit.\n:ivar emission_wavelength_unit: The units of the wavelength of\n    emission - default:nanometres[nm].\n:ivar fluor: The Fluor attribute is used for fluorescence images.\n    This is the name of the fluorophore used to produce this channel\n    [plain text string]\n:ivar ndfilter: The NDfilter attribute is used to specify the\n    combined effect of any neutral density filters used. The amount\n    of light the filter transmits at a maximum [units:none] A\n    fraction, as a value from 0.0 to 1.0. NOTE: This was formerly\n    described as \"units optical density expressed as a\n    PercentFraction\". This was how the field had been described in\n    the schema from the beginning but all the use of it has been in\n    the opposite direction, i.e. as a amount transmitted, not the\n    amount blocked. This change has been made to make the model\n    reflect this usage.\n:ivar pockel_cell_setting: The PockelCellSetting used for this\n    channel. This is the amount the polarization of the beam is\n    rotated by. [units:none]\n:ivar color: A color used to render this channel - encoded as RGBA\n    The default value \"-1\" is #FFFFFFFF so solid white (it is a\n    signed 32 bit value) NOTE: Prior to the 2012-06 schema the\n    default value was incorrect and produced a transparent red not\n    solid white.",
      "type": "object",
      "properties": {
        "light_source_settings": {
          "title": "Light Source Settings",
          "metadata": {
            "name": "LightSourceSettings",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/LightSourceSettings"
            }
          ]
        },
        "detector_settings": {
          "title": "Detector Settings",
          "metadata": {
            "name": "DetectorSettings",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/DetectorSettings"
            }
          ]
        },
        "filter_set_ref": {
          "title": "Filter Set Ref",
          "metadata": {
            "name": "FilterSetRef",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/FilterSetRef"
            }
          ]
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "light_path": {
          "title": "Light Path",
          "metadata": {
            "name": "LightPath",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/LightPath"
            }
          ]
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Channel:\\S+)|(Channel:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Channel:\\S+)|(Channel:\\S+)"
          },
          "type": "string"
        },
        "name": {
          "title": "Name",
          "metadata": {
            "name": "Name",
            "type": "Attribute"
          },
          "type": "string"
        },
        "samples_per_pixel": {
          "title": "Samples Per Pixel",
          "minimum": 1,
          "metadata": {
            "name": "SamplesPerPixel",
            "type": "Attribute",
            "min_inclusive": 1
          },
          "type": "integer"
        },
        "illumination_type": {
          "metadata": {
            "name": "IlluminationType",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ChannelIlluminationType"
            }
          ]
        },
        "pinhole_size": {
          "title": "Pinhole Size",
          "metadata": {
            "name": "PinholeSize",
            "type": "Attribute"
          },
          "type": "number"
        },
        "pinhole_size_unit": {
          "default": "\u00b5m",
          "metadata": {
            "name": "PinholeSizeUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "acquisition_mode": {
          "metadata": {
            "name": "AcquisitionMode",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ChannelAcquisitionMode"
            }
          ]
        },
        "contrast_method": {
          "metadata": {
            "name": "ContrastMethod",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ChannelContrastMethod"
            }
          ]
        },
        "excitation_wavelength": {
          "title": "Excitation Wavelength",
          "exclusiveMinimum": 0.0,
          "metadata": {
            "name": "ExcitationWavelength",
            "type": "Attribute",
            "min_exclusive": 0.0
          },
          "type": "number"
        },
        "excitation_wavelength_unit": {
          "default": "nm",
          "metadata": {
            "name": "ExcitationWavelengthUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "emission_wavelength": {
          "title": "Emission Wavelength",
          "exclusiveMinimum": 0.0,
          "metadata": {
            "name": "EmissionWavelength",
            "type": "Attribute",
            "min_exclusive": 0.0
          },
          "type": "number"
        },
        "emission_wavelength_unit": {
          "default": "nm",
          "metadata": {
            "name": "EmissionWavelengthUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "fluor": {
          "title": "Fluor",
          "metadata": {
            "name": "Fluor",
            "type": "Attribute"
          },
          "type": "string"
        },
        "ndfilter": {
          "title": "Ndfilter",
          "metadata": {
            "name": "NDFilter",
            "type": "Attribute"
          },
          "type": "number"
        },
        "pockel_cell_setting": {
          "title": "Pockel Cell Setting",
          "metadata": {
            "name": "PockelCellSetting",
            "type": "Attribute"
          },
          "type": "integer"
        },
        "color": {
          "title": "Color",
          "default": -1,
          "metadata": {
            "name": "Color",
            "type": "Attribute"
          },
          "type": "integer"
        }
      }
    },
    "BinDataCompression": {
      "title": "BinDataCompression",
      "description": "An enumeration.",
      "enum": [
        "zlib",
        "bzip2",
        "none"
      ]
    },
    "BinData": {
      "title": "BinData",
      "description": "The contents of this element are base64-encoded.\n\nThese are not CDATA sections, just a base64 stream.\n\n:ivar value:\n:ivar compression: Specifies the compression scheme used to encode\n    the data.\n:ivar big_endian: This is true if the binary data was written in\n    BigEndian order. This is dependent on the system architecture of\n    the machine that wrote the pixels. True for essentially all\n    modern CPUs other than Intel and Alpha. All Binary data must be\n    written in the same endian order.\n:ivar length: Character count attribute for the BinData field. This\n    is the length of the base-64 encoded block. It allows easy\n    skipping of the block when parsing the file. [unit:bytes]",
      "type": "object",
      "properties": {
        "value": {
          "title": "Value",
          "metadata": {
            "required": true,
            "format": "base64"
          },
          "type": "string",
          "format": "binary"
        },
        "compression": {
          "default": "none",
          "metadata": {
            "name": "Compression",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/BinDataCompression"
            }
          ]
        },
        "big_endian": {
          "title": "Big Endian",
          "metadata": {
            "name": "BigEndian",
            "type": "Attribute",
            "required": true
          },
          "type": "boolean"
        },
        "length": {
          "title": "Length",
          "minimum": 0,
          "metadata": {
            "name": "Length",
            "type": "Attribute",
            "required": true,
            "min_inclusive": 0
          },
          "type": "integer"
        }
      }
    },
    "Uuid": {
      "title": "Uuid",
      "description": ":ivar value:\n:ivar file_name: This can be used when the IFDs are located in\n    another file. The / (forward slash) is used as the path\n    separator. A relative path is recommended. However an\n    absolute path can be specified. Default is to use the file\n    the ome-xml data has been pulled from. Note: It is\n    permissible for this to be self referential. The file\n    image1.tiff may contain ome-xml data that has\n    FilePath=\"image1.tiff\" or \"./image1.tiff\"",
      "type": "object",
      "properties": {
        "value": {
          "title": "Value",
          "default": "",
          "pattern": "(urn:uuid:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})",
          "metadata": {
            "required": true,
            "pattern": "(urn:uuid:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
          },
          "type": "string"
        },
        "file_name": {
          "title": "File Name",
          "metadata": {
            "name": "FileName",
            "type": "Attribute"
          },
          "type": "string"
        }
      }
    },
    "TiffData": {
      "title": "TiffData",
      "description": "This described the location of the pixel data in a tiff file.\n\n:ivar uuid: This must be used when the IFDs are located in another\n    file. Note: It is permissible for this to be self referential.\n:ivar ifd: Gives the IFD(s) for which this element is applicable.\n    Indexed from 0. Default is 0 (the first IFD). [units:none]\n:ivar first_z: Gives the Z position of the image plane at the\n    specified IFD. Indexed from 0. Default is 0 (the first Z\n    position). [units:none]\n:ivar first_t: Gives the T position of the image plane at the\n    specified IFD. Indexed from 0. Default is 0 (the first T\n    position). [units:none]\n:ivar first_c: Gives the C position of the image plane at the\n    specified IFD. Indexed from 0. Default is 0 (the first C\n    position). [units:none]\n:ivar plane_count: Gives the number of IFDs affected. Dimension\n    order of IFDs is given by the enclosing Pixels element's\n    DimensionOrder attribute. Default is the number of IFDs in the\n    TIFF file, unless an IFD is specified, in which case the default\n    is 1. [units:none]",
      "type": "object",
      "properties": {
        "uuid": {
          "title": "Uuid",
          "metadata": {
            "name": "UUID",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/Uuid"
            }
          ]
        },
        "ifd": {
          "title": "Ifd",
          "default": 0,
          "minimum": 0,
          "metadata": {
            "name": "IFD",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "first_z": {
          "title": "First Z",
          "default": 0,
          "minimum": 0,
          "metadata": {
            "name": "FirstZ",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "first_t": {
          "title": "First T",
          "default": 0,
          "minimum": 0,
          "metadata": {
            "name": "FirstT",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "first_c": {
          "title": "First C",
          "default": 0,
          "minimum": 0,
          "metadata": {
            "name": "FirstC",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "plane_count": {
          "title": "Plane Count",
          "minimum": 0,
          "metadata": {
            "name": "PlaneCount",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        }
      }
    },
    "MetadataOnly": {
      "title": "MetadataOnly",
      "description": "This place holder means there is on pixel data in this file.",
      "type": "object",
      "properties": {}
    },
    "UnitsTime": {
      "title": "UnitsTime",
      "description": "The units used to represent a time interval.\n\n:cvar YS: yottasecond SI unit.\n:cvar ZS: zettasecond SI unit.\n:cvar ES: exasecond SI unit.\n:cvar PS: petasecond SI unit.\n:cvar TS: terasecond SI unit.\n:cvar GS: gigasecond SI unit.\n:cvar MS: megasecond SI unit.\n:cvar KS: kilosecond SI unit.\n:cvar HS: hectosecond SI unit.\n:cvar DAS: decasecond SI unit.\n:cvar S: second SI unit.\n:cvar DS: decisecond SI unit.\n:cvar CS: centisecond SI unit.\n:cvar MS_1: millisecond SI unit.\n:cvar S_1: microsecond SI unit.\n:cvar NS: nanosecond SI unit.\n:cvar PS_1: picosecond SI unit.\n:cvar FS: femtosecond SI unit.\n:cvar AS: attosecond SI unit.\n:cvar ZS_1: zeptosecond SI unit.\n:cvar YS_1: yoctosecond SI unit.\n:cvar MIN: minute SI-derived unit.\n:cvar H: hour SI-derived unit.\n:cvar D: day SI-derived unit.",
      "enum": [
        "Ys",
        "Zs",
        "Es",
        "Ps",
        "Ts",
        "Gs",
        "Ms",
        "ks",
        "hs",
        "das",
        "s",
        "ds",
        "cs",
        "ms",
        "\u00b5s",
        "ns",
        "ps",
        "fs",
        "as",
        "zs",
        "ys",
        "min",
        "h",
        "d"
      ]
    },
    "Plane": {
      "title": "Plane",
      "description": "The Plane object holds microscope stage and image timing data for a given\nchannel/z-section/timepoint.\n\n:ivar hash_sha1:\n:ivar annotation_ref:\n:ivar the_z: The Z-section this plane is for. [units:none] This is\n    numbered from 0.\n:ivar the_t: The timepoint this plane is for. [units:none] This is\n    numbered from 0.\n:ivar the_c: The channel this plane is for. [units:none] This is\n    numbered from 0.\n:ivar delta_t: Time since the beginning of the experiment. Units are\n    set by DeltaTUnit.\n:ivar delta_tunit: The units of the DeltaT - default:seconds[s].\n:ivar exposure_time: The length of the exposure. Units are set by\n    ExposureTimeUnit.\n:ivar exposure_time_unit: The units of the ExposureTime -\n    default:seconds[s].\n:ivar position_x: The X position of the stage. Units are set by\n    PositionXUnit.\n:ivar position_xunit: The units of the X stage position -\n    default:[reference frame].\n:ivar position_y: The Y position of the stage. Units are set by\n    PositionYUnit.\n:ivar position_yunit: The units of the Y stage position -\n    default:[reference frame].\n:ivar position_z: The Z position of the stage. Units are set by\n    PositionZUnit.\n:ivar position_zunit: The units of the Z stage position -\n    default:[reference frame].",
      "type": "object",
      "properties": {
        "hash_sha1": {
          "title": "Hash Sha1",
          "metadata": {
            "name": "HashSHA1",
            "type": "Element",
            "length": 20,
            "format": "base16"
          },
          "type": "string",
          "format": "binary"
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "the_z": {
          "title": "The Z",
          "minimum": 0,
          "metadata": {
            "name": "TheZ",
            "type": "Attribute",
            "required": true,
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "the_t": {
          "title": "The T",
          "minimum": 0,
          "metadata": {
            "name": "TheT",
            "type": "Attribute",
            "required": true,
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "the_c": {
          "title": "The C",
          "minimum": 0,
          "metadata": {
            "name": "TheC",
            "type": "Attribute",
            "required": true,
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "delta_t": {
          "title": "Delta T",
          "metadata": {
            "name": "DeltaT",
            "type": "Attribute"
          },
          "type": "number"
        },
        "delta_tunit": {
          "default": "s",
          "metadata": {
            "name": "DeltaTUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsTime"
            }
          ]
        },
        "exposure_time": {
          "title": "Exposure Time",
          "metadata": {
            "name": "ExposureTime",
            "type": "Attribute"
          },
          "type": "number"
        },
        "exposure_time_unit": {
          "default": "s",
          "metadata": {
            "name": "ExposureTimeUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsTime"
            }
          ]
        },
        "position_x": {
          "title": "Position X",
          "metadata": {
            "name": "PositionX",
            "type": "Attribute"
          },
          "type": "number"
        },
        "position_xunit": {
          "default": "reference frame",
          "metadata": {
            "name": "PositionXUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "position_y": {
          "title": "Position Y",
          "metadata": {
            "name": "PositionY",
            "type": "Attribute"
          },
          "type": "number"
        },
        "position_yunit": {
          "default": "reference frame",
          "metadata": {
            "name": "PositionYUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "position_z": {
          "title": "Position Z",
          "metadata": {
            "name": "PositionZ",
            "type": "Attribute"
          },
          "type": "number"
        },
        "position_zunit": {
          "default": "reference frame",
          "metadata": {
            "name": "PositionZUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        }
      }
    },
    "PixelsDimensionOrder": {
      "title": "PixelsDimensionOrder",
      "description": "An enumeration.",
      "enum": [
        "XYZCT",
        "XYZTC",
        "XYCTZ",
        "XYCZT",
        "XYTCZ",
        "XYTZC"
      ]
    },
    "PixelType": {
      "title": "PixelType",
      "description": "The number size/kind used to represent a pixel.\n\n:cvar INT8: 8 bit signed integer.\n:cvar INT16: 16 bit signed integer.\n:cvar INT32: 32 bit signed integer.\n:cvar UINT8: 8 bit unsigned integer.\n:cvar UINT16: 16 bit unsigned integer.\n:cvar UINT32: 32 bit unsigned integer.\n:cvar FLOAT: single-precision floating point.\n:cvar DOUBLE: double-precision floating point.\n:cvar COMPLEX: complex single-precision floating point.\n:cvar DOUBLE_COMPLEX: complex double-precision floating point.\n:cvar BIT: bit mask.",
      "enum": [
        "int8",
        "int16",
        "int32",
        "uint8",
        "uint16",
        "uint32",
        "float",
        "double",
        "complex",
        "double-complex",
        "bit"
      ]
    },
    "Pixels": {
      "title": "Pixels",
      "description": "Pixels is going to be removed in the future, but it is still required.\n\nThis is just notice that the contents of Pixels will be moved up to\nImage in a future release. This is because there has only been 1\nPixels object in each Image for some time. The concept of multiple\nPixels sets for one Image failed to take off. It is therefore\nredundant. The Image will be unreadable if any of the required Pixel\nattributes are missing. The Pixels themselves can be stored within\nthe OME-XML compressed by plane, and encoded in Base64. Or the\nPixels may be stored in TIFF format. The Pixels element should\ncontain a list of BinData or TiffData, each containing a single\nplane of pixels. These Pixels elements, when read in document order,\nmust produce a 5-D pixel array of the size specified in this\nelement, and in the dimension order specified by 'DimensionOrder'.\nAll of the values in the Pixels object when present should match the\nsame value stored in any associated TIFF format (e.g. SizeX should\nbe the same). Where there is a mismatch our readers will take the\nvalue from the TIFF structure as overriding the value in the OME-\nXML. This is simply a pragmatic decision as it increases the\nlikelihood of reading data from a slightly incorrect file.\n\n:ivar channel:\n:ivar bin_data:\n:ivar tiff_data:\n:ivar metadata_only:\n:ivar plane:\n:ivar id:\n:ivar dimension_order: The order in which the individual planes of\n    data are interleaved.\n:ivar type_value: The variable type used to represent each pixel in\n    the image.\n:ivar significant_bits: The number of bits within the type storing\n    each pixel that are significant. e.g. you can store 12 bit data\n    within a 16 bit type. This does not reduce the storage\n    requirements but can be a useful indicator when processing or\n    viewing the image data.\n:ivar interleaved: How the channels are arranged within the data\n    block: true if channels are stored RGBRGBRGB...; false if\n    channels are stored RRR...GGG...BBB...\n:ivar big_endian: This is true if the pixels data was written in\n    BigEndian order. If this value is present it should match the\n    value used in BinData or TiffData. If it does not a reader\n    should honour the value used in the BinData or TiffData. This\n    values is useful for MetadataOnly files and is to allow for\n    future storage solutions.\n:ivar size_x: Dimensional size of pixel data array [units:none]\n:ivar size_y: Dimensional size of pixel data array [units:none]\n:ivar size_z: Dimensional size of pixel data array [units:none]\n:ivar size_c: Dimensional size of pixel data array [units:none]\n:ivar size_t: Dimensional size of pixel data array [units:none]\n:ivar physical_size_x: Physical size of a pixel. Units are set by\n    PhysicalSizeXUnit.\n:ivar physical_size_xunit: The units of the physical size of a pixel\n    - default:microns[\u00b5m].\n:ivar physical_size_y: Physical size of a pixel. Units are set by\n    PhysicalSizeYUnit.\n:ivar physical_size_yunit: The units of the physical size of a pixel\n    - default:microns[\u00b5m].\n:ivar physical_size_z: Physical size of a pixel. Units are set by\n    PhysicalSizeZUnit.\n:ivar physical_size_zunit: The units of the physical size of a pixel\n    - default:microns[\u00b5m].\n:ivar time_increment: TimeIncrement is used for time series that\n    have a global timing specification instead of per-timepoint\n    timing info. For example in a video stream. Units are set by\n    TimeIncrementUnit.\n:ivar time_increment_unit: The units of the TimeIncrement -\n    default:seconds[s].",
      "type": "object",
      "properties": {
        "channel": {
          "title": "Channel",
          "metadata": {
            "name": "Channel",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "bin_data": {
          "title": "Bin Data",
          "metadata": {
            "name": "BinData",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/BinData"
          }
        },
        "tiff_data": {
          "title": "Tiff Data",
          "metadata": {
            "name": "TiffData",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/TiffData"
          }
        },
        "metadata_only": {
          "title": "Metadata Only",
          "metadata": {
            "name": "MetadataOnly",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/MetadataOnly"
            }
          ]
        },
        "plane": {
          "title": "Plane",
          "metadata": {
            "name": "Plane",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Plane"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Pixels:\\S+)|(Pixels:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Pixels:\\S+)|(Pixels:\\S+)"
          },
          "type": "string"
        },
        "dimension_order": {
          "metadata": {
            "name": "DimensionOrder",
            "type": "Attribute",
            "required": true
          },
          "allOf": [
            {
              "$ref": "#/definitions/PixelsDimensionOrder"
            }
          ]
        },
        "type_value": {
          "metadata": {
            "name": "Type",
            "type": "Attribute",
            "required": true
          },
          "allOf": [
            {
              "$ref": "#/definitions/PixelType"
            }
          ]
        },
        "significant_bits": {
          "title": "Significant Bits",
          "minimum": 1,
          "metadata": {
            "name": "SignificantBits",
            "type": "Attribute",
            "min_inclusive": 1
          },
          "type": "integer"
        },
        "interleaved": {
          "title": "Interleaved",
          "metadata": {
            "name": "Interleaved",
            "type": "Attribute"
          },
          "type": "boolean"
        },
        "big_endian": {
          "title": "Big Endian",
          "metadata": {
            "name": "BigEndian",
            "type": "Attribute"
          },
          "type": "boolean"
        },
        "size_x": {
          "title": "Size X",
          "minimum": 1,
          "metadata": {
            "name": "SizeX",
            "type": "Attribute",
            "required": true,
            "min_inclusive": 1
          },
          "type": "integer"
        },
        "size_y": {
          "title": "Size Y",
          "minimum": 1,
          "metadata": {
            "name": "SizeY",
            "type": "Attribute",
            "required": true,
            "min_inclusive": 1
          },
          "type": "integer"
        },
        "size_z": {
          "title": "Size Z",
          "minimum": 1,
          "metadata": {
            "name": "SizeZ",
            "type": "Attribute",
            "required": true,
            "min_inclusive": 1
          },
          "type": "integer"
        },
        "size_c": {
          "title": "Size C",
          "minimum": 1,
          "metadata": {
            "name": "SizeC",
            "type": "Attribute",
            "required": true,
            "min_inclusive": 1
          },
          "type": "integer"
        },
        "size_t": {
          "title": "Size T",
          "minimum": 1,
          "metadata": {
            "name": "SizeT",
            "type": "Attribute",
            "required": true,
            "min_inclusive": 1
          },
          "type": "integer"
        },
        "physical_size_x": {
          "title": "Physical Size X",
          "exclusiveMinimum": 0.0,
          "metadata": {
            "name": "PhysicalSizeX",
            "type": "Attribute",
            "min_exclusive": 0.0
          },
          "type": "number"
        },
        "physical_size_xunit": {
          "default": "\u00b5m",
          "metadata": {
            "name": "PhysicalSizeXUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "physical_size_y": {
          "title": "Physical Size Y",
          "exclusiveMinimum": 0.0,
          "metadata": {
            "name": "PhysicalSizeY",
            "type": "Attribute",
            "min_exclusive": 0.0
          },
          "type": "number"
        },
        "physical_size_yunit": {
          "default": "\u00b5m",
          "metadata": {
            "name": "PhysicalSizeYUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "physical_size_z": {
          "title": "Physical Size Z",
          "exclusiveMinimum": 0.0,
          "metadata": {
            "name": "PhysicalSizeZ",
            "type": "Attribute",
            "min_exclusive": 0.0
          },
          "type": "number"
        },
        "physical_size_zunit": {
          "default": "\u00b5m",
          "metadata": {
            "name": "PhysicalSizeZUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "time_increment": {
          "title": "Time Increment",
          "metadata": {
            "name": "TimeIncrement",
            "type": "Attribute"
          },
          "type": "number"
        },
        "time_increment_unit": {
          "default": "s",
          "metadata": {
            "name": "TimeIncrementUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsTime"
            }
          ]
        }
      }
    },
    "MicrobeamManipulationRef": {
      "title": "MicrobeamManipulationRef",
      "description": "Reference is an empty complex type that is contained and extended by all the\n*Ref elements and also the Settings Complex Type Each *Ref element defines an\nattribute named ID of simple type *ID and no other information Each simple type\n*ID is restricted to the base type LSID with an appropriate pattern.",
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:MicrobeamManipulation:\\S+)|(MicrobeamManipulation:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:MicrobeamManipulation:\\S+)|(MicrobeamManipulation:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "Image": {
      "title": "Image",
      "description": "This element describes the actual image and its meta-data.\n\nThe elements that are references (ending in Ref or Settings) refer\nto elements defined outside of the Image element. Ref elements are\nsimple links, while Settings elements are links with additional\nvalues. If any of the required Image attributes or elements are\nmissing, its guaranteed to be an invalid document. The required\nattributes and elements are ID and Pixels. ExperimenterRef is\nrequired for all Images with well formed LSIDs. ImageType is a\nvendor-specific designation of the type of image this is. Examples\nof ImageType include 'STK', 'SoftWorx', etc. The Name attributes are\nin all cases the name of the element instance. In this case, the\nname of the image, not necessarily the filename. Physical size of\npixels are microns[\u00b5m].\n\n:ivar acquisition_date: The acquisition date of the Image. The\n    element contains an xsd:dateTime string based on the ISO 8601\n    format (i.e. 1988-04-07T18:39:09.359) YYYY-MM-DDTHH:mm:SS.sssZ Y\n    - Year M - Month D - Day H - Hour m - minutes S - Seconds s -\n    sub-seconds (optional) Z - Zone (optional) +HH:mm or -HH:mm or Z\n    for UTC Note: xsd:dataTime supports a very wide date range with\n    unlimited precision. The full date range and precision are not\n    typically supported by platform- and language-specific\n    libraries. Where the supported time precision is less than the\n    precision used by the xsd:dateTime timestamp there will be loss\n    of precision; this will typically occur via direct truncation or\n    (less commonly) rounding. The year value can be large and/or\n    negative. Any value covering the current or last century should\n    be correctly processed, but some systems cannot process earlier\n    dates. The sub-second value is defined as an unlimited number of\n    digits after the decimal point. In Java a minimum of millisecond\n    precision is guaranteed. In C++ microsecond precision is\n    guaranteed, with nanosecond precision being available on some\n    platforms. Time zones are supported, eg\n    '2013-10-24T11:52:33+01:00' for Paris, but in most cases it will\n    be converted to UTC when the timestamp is written.\n:ivar experimenter_ref:\n:ivar description: A description for the image. [plain-text multi-\n    line string]\n:ivar experiment_ref:\n:ivar experimenter_group_ref:\n:ivar instrument_ref:\n:ivar objective_settings:\n:ivar imaging_environment:\n:ivar stage_label:\n:ivar pixels:\n:ivar roiref:\n:ivar microbeam_manipulation_ref:\n:ivar annotation_ref:\n:ivar id:\n:ivar name:",
      "type": "object",
      "properties": {
        "experimenter_ref": {
          "title": "Experimenter Ref",
          "metadata": {
            "name": "ExperimenterRef",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ExperimenterRef"
            }
          ]
        },
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "experiment_ref": {
          "title": "Experiment Ref",
          "metadata": {
            "name": "ExperimentRef",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ExperimentRef"
            }
          ]
        },
        "experimenter_group_ref": {
          "title": "Experimenter Group Ref",
          "metadata": {
            "name": "ExperimenterGroupRef",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ExperimenterGroupRef"
            }
          ]
        },
        "instrument_ref": {
          "title": "Instrument Ref",
          "metadata": {
            "name": "InstrumentRef",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/InstrumentRef"
            }
          ]
        },
        "objective_settings": {
          "title": "Objective Settings",
          "metadata": {
            "name": "ObjectiveSettings",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ObjectiveSettings"
            }
          ]
        },
        "imaging_environment": {
          "title": "Imaging Environment",
          "metadata": {
            "name": "ImagingEnvironment",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ImagingEnvironment"
            }
          ]
        },
        "stage_label": {
          "title": "Stage Label",
          "metadata": {
            "name": "StageLabel",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/StageLabel"
            }
          ]
        },
        "pixels": {
          "title": "Pixels",
          "metadata": {
            "name": "Pixels",
            "type": "Element",
            "required": true
          },
          "allOf": [
            {
              "$ref": "#/definitions/Pixels"
            }
          ]
        },
        "roiref": {
          "title": "Roiref",
          "metadata": {
            "name": "ROIRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roiref"
          }
        },
        "microbeam_manipulation_ref": {
          "title": "Microbeam Manipulation Ref",
          "metadata": {
            "name": "MicrobeamManipulationRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/MicrobeamManipulationRef"
          }
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Image:\\S+)|(Image:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Image:\\S+)|(Image:\\S+)"
          },
          "type": "string"
        },
        "name": {
          "title": "Name",
          "metadata": {
            "name": "Name",
            "type": "Attribute"
          },
          "type": "string"
        }
      }
    },
    "Value": {
      "title": "Value",
      "type": "object",
      "properties": {
        "any_element": {
          "title": "Any Element",
          "metadata": {
            "type": "Wildcard",
            "namespace": "##any"
          },
          "type": "array",
          "items": {}
        }
      }
    },
    "Xmlannotation": {
      "title": "Xmlannotation",
      "description": "An general xml annotation.\n\nThe contents of this is not processed as OME XML but should still be\nwell-formed XML.",
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)"
          },
          "type": "string"
        },
        "namespace": {
          "title": "Namespace",
          "metadata": {
            "name": "Namespace",
            "type": "Attribute"
          },
          "type": "string"
        },
        "annotator": {
          "title": "Annotator",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
          "metadata": {
            "name": "Annotator",
            "type": "Attribute",
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)"
          },
          "type": "string"
        },
        "value": {
          "title": "Value",
          "metadata": {
            "name": "Value",
            "type": "Element",
            "required": true
          },
          "allOf": [
            {
              "$ref": "#/definitions/Value"
            }
          ]
        }
      }
    },
    "ExternalCompression": {
      "title": "ExternalCompression",
      "description": "An enumeration.",
      "enum": [
        "zlib",
        "bzip2",
        "none"
      ]
    },
    "External": {
      "title": "External",
      "description": "Describes a file location.\n\nCan optionally specify a portion of a file using Offset and a\nReadLength. If Offset and ReadLength are specified in conjuction\nwith Compression, then they point into the uncompressed file.\n\n:ivar href: file location\n:ivar sha1: The digest of the file specified in href.\n:ivar compression: Specifies the compression scheme used to encode\n    the data.",
      "type": "object",
      "properties": {
        "href": {
          "title": "Href",
          "metadata": {
            "type": "Attribute",
            "required": true
          },
          "type": "string"
        },
        "sha1": {
          "title": "Sha1",
          "metadata": {
            "name": "SHA1",
            "type": "Attribute",
            "required": true,
            "length": 20,
            "format": "base16"
          },
          "type": "string",
          "format": "binary"
        },
        "compression": {
          "default": "none",
          "metadata": {
            "name": "Compression",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ExternalCompression"
            }
          ]
        }
      }
    },
    "BinaryFile": {
      "title": "BinaryFile",
      "description": "Describes a binary file.\n\n:ivar external:\n:ivar bin_data:\n:ivar file_name:\n:ivar size: Size of the uncompressed file. [unit:bytes]\n:ivar mimetype:",
      "type": "object",
      "properties": {
        "external": {
          "title": "External",
          "metadata": {
            "name": "External",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/External"
            }
          ]
        },
        "bin_data": {
          "title": "Bin Data",
          "metadata": {
            "name": "BinData",
            "type": "Element"
          },
          "allOf": [
            {
              "$ref": "#/definitions/BinData"
            }
          ]
        },
        "file_name": {
          "title": "File Name",
          "metadata": {
            "name": "FileName",
            "type": "Attribute",
            "required": true
          },
          "type": "string"
        },
        "size": {
          "title": "Size",
          "minimum": 0,
          "metadata": {
            "name": "Size",
            "type": "Attribute",
            "required": true,
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "mimetype": {
          "title": "Mimetype",
          "metadata": {
            "name": "MIMEType",
            "type": "Attribute"
          },
          "type": "string"
        }
      }
    },
    "FileAnnotation": {
      "title": "FileAnnotation",
      "description": "A file object annotation.",
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)"
          },
          "type": "string"
        },
        "namespace": {
          "title": "Namespace",
          "metadata": {
            "name": "Namespace",
            "type": "Attribute"
          },
          "type": "string"
        },
        "annotator": {
          "title": "Annotator",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
          "metadata": {
            "name": "Annotator",
            "type": "Attribute",
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)"
          },
          "type": "string"
        },
        "binary_file": {
          "title": "Binary File",
          "metadata": {
            "name": "BinaryFile",
            "type": "Element",
            "required": true
          },
          "allOf": [
            {
              "$ref": "#/definitions/BinaryFile"
            }
          ]
        }
      }
    },
    "ListAnnotation": {
      "title": "ListAnnotation",
      "description": "This annotation is a grouping object.\n\nIt uses the sequence of annotation refs from the base Annotation to\nform the list.",
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)"
          },
          "type": "string"
        },
        "namespace": {
          "title": "Namespace",
          "metadata": {
            "name": "Namespace",
            "type": "Attribute"
          },
          "type": "string"
        },
        "annotator": {
          "title": "Annotator",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
          "metadata": {
            "name": "Annotator",
            "type": "Attribute",
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "LongAnnotation": {
      "title": "LongAnnotation",
      "description": "A simple numerical annotation of type xsd:long.",
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)"
          },
          "type": "string"
        },
        "namespace": {
          "title": "Namespace",
          "metadata": {
            "name": "Namespace",
            "type": "Attribute"
          },
          "type": "string"
        },
        "annotator": {
          "title": "Annotator",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
          "metadata": {
            "name": "Annotator",
            "type": "Attribute",
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)"
          },
          "type": "string"
        },
        "value": {
          "title": "Value",
          "metadata": {
            "name": "Value",
            "type": "Element",
            "required": true
          },
          "type": "integer"
        }
      }
    },
    "DoubleAnnotation": {
      "title": "DoubleAnnotation",
      "description": "A simple numerical annotation of type xsd:double.",
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)"
          },
          "type": "string"
        },
        "namespace": {
          "title": "Namespace",
          "metadata": {
            "name": "Namespace",
            "type": "Attribute"
          },
          "type": "string"
        },
        "annotator": {
          "title": "Annotator",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
          "metadata": {
            "name": "Annotator",
            "type": "Attribute",
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)"
          },
          "type": "string"
        },
        "value": {
          "title": "Value",
          "metadata": {
            "name": "Value",
            "type": "Element",
            "required": true
          },
          "type": "number"
        }
      }
    },
    "CommentAnnotation": {
      "title": "CommentAnnotation",
      "description": "A simple comment annotation.",
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)"
          },
          "type": "string"
        },
        "namespace": {
          "title": "Namespace",
          "metadata": {
            "name": "Namespace",
            "type": "Attribute"
          },
          "type": "string"
        },
        "annotator": {
          "title": "Annotator",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
          "metadata": {
            "name": "Annotator",
            "type": "Attribute",
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)"
          },
          "type": "string"
        },
        "value": {
          "title": "Value",
          "metadata": {
            "name": "Value",
            "type": "Element",
            "required": true
          },
          "type": "string"
        }
      }
    },
    "BooleanAnnotation": {
      "title": "BooleanAnnotation",
      "description": "A simple boolean annotation of type xsd:boolean.",
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)"
          },
          "type": "string"
        },
        "namespace": {
          "title": "Namespace",
          "metadata": {
            "name": "Namespace",
            "type": "Attribute"
          },
          "type": "string"
        },
        "annotator": {
          "title": "Annotator",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
          "metadata": {
            "name": "Annotator",
            "type": "Attribute",
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)"
          },
          "type": "string"
        },
        "value": {
          "title": "Value",
          "metadata": {
            "name": "Value",
            "type": "Element",
            "required": true
          },
          "type": "boolean"
        }
      }
    },
    "TimestampAnnotation": {
      "title": "TimestampAnnotation",
      "description": "A date/time annotation of type xsd:dateTime.",
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)"
          },
          "type": "string"
        },
        "namespace": {
          "title": "Namespace",
          "metadata": {
            "name": "Namespace",
            "type": "Attribute"
          },
          "type": "string"
        },
        "annotator": {
          "title": "Annotator",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
          "metadata": {
            "name": "Annotator",
            "type": "Attribute",
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)"
          },
          "type": "string"
        }
      }
    },
    "TagAnnotation": {
      "title": "TagAnnotation",
      "description": "A tag annotation (represents a tag or a tagset)",
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)"
          },
          "type": "string"
        },
        "namespace": {
          "title": "Namespace",
          "metadata": {
            "name": "Namespace",
            "type": "Attribute"
          },
          "type": "string"
        },
        "annotator": {
          "title": "Annotator",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
          "metadata": {
            "name": "Annotator",
            "type": "Attribute",
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)"
          },
          "type": "string"
        },
        "value": {
          "title": "Value",
          "metadata": {
            "name": "Value",
            "type": "Element",
            "required": true
          },
          "type": "string"
        }
      }
    },
    "TermAnnotation": {
      "title": "TermAnnotation",
      "description": "A ontology term annotation.",
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)"
          },
          "type": "string"
        },
        "namespace": {
          "title": "Namespace",
          "metadata": {
            "name": "Namespace",
            "type": "Attribute"
          },
          "type": "string"
        },
        "annotator": {
          "title": "Annotator",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
          "metadata": {
            "name": "Annotator",
            "type": "Attribute",
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)"
          },
          "type": "string"
        },
        "value": {
          "title": "Value",
          "metadata": {
            "name": "Value",
            "type": "Element",
            "required": true
          },
          "type": "string"
        }
      }
    },
    "MapAnnotation": {
      "title": "MapAnnotation",
      "description": "An map annotation.\n\nThe contents of this is a list of key/value pairs.",
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Annotation:\\S+)|(Annotation:\\S+)"
          },
          "type": "string"
        },
        "namespace": {
          "title": "Namespace",
          "metadata": {
            "name": "Namespace",
            "type": "Attribute"
          },
          "type": "string"
        },
        "annotator": {
          "title": "Annotator",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
          "metadata": {
            "name": "Annotator",
            "type": "Attribute",
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)"
          },
          "type": "string"
        },
        "value": {
          "title": "Value",
          "metadata": {
            "name": "Value",
            "type": "Element",
            "required": true
          },
          "allOf": [
            {
              "$ref": "#/definitions/Map"
            }
          ]
        }
      }
    },
    "StructuredAnnotations": {
      "title": "StructuredAnnotations",
      "description": "An unordered collection of annotation attached to objects in the OME data\nmodel.",
      "type": "object",
      "properties": {
        "xmlannotation": {
          "title": "Xmlannotation",
          "metadata": {
            "name": "XMLAnnotation",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Xmlannotation"
          }
        },
        "file_annotation": {
          "title": "File Annotation",
          "metadata": {
            "name": "FileAnnotation",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileAnnotation"
          }
        },
        "list_annotation": {
          "title": "List Annotation",
          "metadata": {
            "name": "ListAnnotation",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListAnnotation"
          }
        },
        "long_annotation": {
          "title": "Long Annotation",
          "metadata": {
            "name": "LongAnnotation",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/LongAnnotation"
          }
        },
        "double_annotation": {
          "title": "Double Annotation",
          "metadata": {
            "name": "DoubleAnnotation",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/DoubleAnnotation"
          }
        },
        "comment_annotation": {
          "title": "Comment Annotation",
          "metadata": {
            "name": "CommentAnnotation",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommentAnnotation"
          }
        },
        "boolean_annotation": {
          "title": "Boolean Annotation",
          "metadata": {
            "name": "BooleanAnnotation",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/BooleanAnnotation"
          }
        },
        "timestamp_annotation": {
          "title": "Timestamp Annotation",
          "metadata": {
            "name": "TimestampAnnotation",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimestampAnnotation"
          }
        },
        "tag_annotation": {
          "title": "Tag Annotation",
          "metadata": {
            "name": "TagAnnotation",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagAnnotation"
          }
        },
        "term_annotation": {
          "title": "Term Annotation",
          "metadata": {
            "name": "TermAnnotation",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/TermAnnotation"
          }
        },
        "map_annotation": {
          "title": "Map Annotation",
          "metadata": {
            "name": "MapAnnotation",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/MapAnnotation"
          }
        }
      }
    },
    "AffineTransform": {
      "title": "AffineTransform",
      "description": "A matrix used to transform the shape.\n\n\u23a1 A00, A01, A02 \u23a4 \u23a2 A10, A11, A12 \u23a5 \u23a3 0,   0,   1   \u23a6",
      "type": "object",
      "properties": {
        "a00": {
          "title": "A00",
          "metadata": {
            "name": "A00",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        },
        "a10": {
          "title": "A10",
          "metadata": {
            "name": "A10",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        },
        "a01": {
          "title": "A01",
          "metadata": {
            "name": "A01",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        },
        "a11": {
          "title": "A11",
          "metadata": {
            "name": "A11",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        },
        "a02": {
          "title": "A02",
          "metadata": {
            "name": "A02",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        },
        "a12": {
          "title": "A12",
          "metadata": {
            "name": "A12",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        }
      }
    },
    "ShapeFillRule": {
      "title": "ShapeFillRule",
      "description": "The rule used to decide which parts of the shape to fill.\n\n[enumeration]",
      "enum": [
        "EvenOdd",
        "NonZero"
      ]
    },
    "ShapeFontFamily": {
      "title": "ShapeFontFamily",
      "description": "The font family used to draw the text.\n\n[enumeration]\nNote: these values are all lower case so they match\nthe standard HTML/CSS values. \"fantasy\" has been\nincluded for completeness; we do not recommend its\nregular use. This attribute is under consideration\nfor removal from the OME-XML schema.",
      "enum": [
        "serif",
        "sans-serif",
        "cursive",
        "fantasy",
        "monospace"
      ]
    },
    "ShapeFontStyle": {
      "title": "ShapeFontStyle",
      "description": "The style and weight applied to the text.\n\n[enumeration] This is a simplified combination of the HTML/CSS\nattributes font-style AND font-weight.",
      "enum": [
        "Bold",
        "BoldItalic",
        "Italic",
        "Normal"
      ]
    },
    "Label": {
      "title": "Label",
      "description": "The text label.\n\nAny transformation should be applied at the shape level.\n\n:ivar x: This defines the X coordinate of the current text position\n    of the first character in the string. [units pixels]\n:ivar y: This defines the Y coordinate of the current text position\n    of the first character in the string. [units pixels]",
      "type": "object",
      "properties": {
        "transform": {
          "title": "Transform",
          "metadata": {
            "name": "Transform",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "allOf": [
            {
              "$ref": "#/definitions/AffineTransform"
            }
          ]
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "fill_color": {
          "title": "Fill Color",
          "metadata": {
            "name": "FillColor",
            "type": "Attribute"
          },
          "type": "integer"
        },
        "fill_rule": {
          "metadata": {
            "name": "FillRule",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFillRule"
            }
          ]
        },
        "stroke_color": {
          "title": "Stroke Color",
          "metadata": {
            "name": "StrokeColor",
            "type": "Attribute"
          },
          "type": "integer"
        },
        "stroke_width": {
          "title": "Stroke Width",
          "metadata": {
            "name": "StrokeWidth",
            "type": "Attribute"
          },
          "type": "number"
        },
        "stroke_width_unit": {
          "default": "pixel",
          "metadata": {
            "name": "StrokeWidthUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "stroke_dash_array": {
          "title": "Stroke Dash Array",
          "metadata": {
            "name": "StrokeDashArray",
            "type": "Attribute"
          },
          "type": "string"
        },
        "text": {
          "title": "Text",
          "metadata": {
            "name": "Text",
            "type": "Attribute"
          },
          "type": "string"
        },
        "font_family": {
          "metadata": {
            "name": "FontFamily",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFontFamily"
            }
          ]
        },
        "font_size": {
          "title": "Font Size",
          "minimum": 0,
          "metadata": {
            "name": "FontSize",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "font_size_unit": {
          "default": "pt",
          "metadata": {
            "name": "FontSizeUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "font_style": {
          "metadata": {
            "name": "FontStyle",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFontStyle"
            }
          ]
        },
        "locked": {
          "title": "Locked",
          "metadata": {
            "name": "Locked",
            "type": "Attribute"
          },
          "type": "boolean"
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)"
          },
          "type": "string"
        },
        "the_z": {
          "title": "The Z",
          "minimum": 0,
          "metadata": {
            "name": "TheZ",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "the_t": {
          "title": "The T",
          "minimum": 0,
          "metadata": {
            "name": "TheT",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "the_c": {
          "title": "The C",
          "minimum": 0,
          "metadata": {
            "name": "TheC",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "x": {
          "title": "X",
          "metadata": {
            "name": "X",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        },
        "y": {
          "title": "Y",
          "metadata": {
            "name": "Y",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        }
      }
    },
    "Polygon": {
      "title": "Polygon",
      "description": "The Polygon defines closed shapes formed of straight lines.\n\nNote: Polygon uses counterclockwise winding (this is the\ndefault OpenGL behavior)\n\n:ivar points: The points of the Polygon are defined as a list of\n    comma separated x,y coordinates seperated by spaces like \"x1,y1\n    x2,y2 x3,y3\" e.g. \"0,0 1,2 3,5\"",
      "type": "object",
      "properties": {
        "transform": {
          "title": "Transform",
          "metadata": {
            "name": "Transform",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "allOf": [
            {
              "$ref": "#/definitions/AffineTransform"
            }
          ]
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "fill_color": {
          "title": "Fill Color",
          "metadata": {
            "name": "FillColor",
            "type": "Attribute"
          },
          "type": "integer"
        },
        "fill_rule": {
          "metadata": {
            "name": "FillRule",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFillRule"
            }
          ]
        },
        "stroke_color": {
          "title": "Stroke Color",
          "metadata": {
            "name": "StrokeColor",
            "type": "Attribute"
          },
          "type": "integer"
        },
        "stroke_width": {
          "title": "Stroke Width",
          "metadata": {
            "name": "StrokeWidth",
            "type": "Attribute"
          },
          "type": "number"
        },
        "stroke_width_unit": {
          "default": "pixel",
          "metadata": {
            "name": "StrokeWidthUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "stroke_dash_array": {
          "title": "Stroke Dash Array",
          "metadata": {
            "name": "StrokeDashArray",
            "type": "Attribute"
          },
          "type": "string"
        },
        "text": {
          "title": "Text",
          "metadata": {
            "name": "Text",
            "type": "Attribute"
          },
          "type": "string"
        },
        "font_family": {
          "metadata": {
            "name": "FontFamily",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFontFamily"
            }
          ]
        },
        "font_size": {
          "title": "Font Size",
          "minimum": 0,
          "metadata": {
            "name": "FontSize",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "font_size_unit": {
          "default": "pt",
          "metadata": {
            "name": "FontSizeUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "font_style": {
          "metadata": {
            "name": "FontStyle",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFontStyle"
            }
          ]
        },
        "locked": {
          "title": "Locked",
          "metadata": {
            "name": "Locked",
            "type": "Attribute"
          },
          "type": "boolean"
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)"
          },
          "type": "string"
        },
        "the_z": {
          "title": "The Z",
          "minimum": 0,
          "metadata": {
            "name": "TheZ",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "the_t": {
          "title": "The T",
          "minimum": 0,
          "metadata": {
            "name": "TheT",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "the_c": {
          "title": "The C",
          "minimum": 0,
          "metadata": {
            "name": "TheC",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "points": {
          "title": "Points",
          "metadata": {
            "name": "Points",
            "type": "Attribute",
            "required": true
          },
          "type": "string"
        }
      }
    },
    "Marker": {
      "title": "Marker",
      "description": "Shape of marker on the end of a line.\n\n[enumeration]",
      "enum": [
        "Arrow"
      ]
    },
    "Polyline": {
      "title": "Polyline",
      "description": "The Polyline defines open shapes formed of straight lines.\n\nNote: Polyline uses counterclockwise winding (this is the\ndefault OpenGL behavior)\n\n:ivar points: The points of the polyline are defined as a list of\n    comma separated x,y coordinates seperated by spaces like \"x1,y1\n    x2,y2 x3,y3\" e.g. \"0,0 1,2 3,5\"\n:ivar marker_start:\n:ivar marker_end:",
      "type": "object",
      "properties": {
        "transform": {
          "title": "Transform",
          "metadata": {
            "name": "Transform",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "allOf": [
            {
              "$ref": "#/definitions/AffineTransform"
            }
          ]
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "fill_color": {
          "title": "Fill Color",
          "metadata": {
            "name": "FillColor",
            "type": "Attribute"
          },
          "type": "integer"
        },
        "fill_rule": {
          "metadata": {
            "name": "FillRule",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFillRule"
            }
          ]
        },
        "stroke_color": {
          "title": "Stroke Color",
          "metadata": {
            "name": "StrokeColor",
            "type": "Attribute"
          },
          "type": "integer"
        },
        "stroke_width": {
          "title": "Stroke Width",
          "metadata": {
            "name": "StrokeWidth",
            "type": "Attribute"
          },
          "type": "number"
        },
        "stroke_width_unit": {
          "default": "pixel",
          "metadata": {
            "name": "StrokeWidthUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "stroke_dash_array": {
          "title": "Stroke Dash Array",
          "metadata": {
            "name": "StrokeDashArray",
            "type": "Attribute"
          },
          "type": "string"
        },
        "text": {
          "title": "Text",
          "metadata": {
            "name": "Text",
            "type": "Attribute"
          },
          "type": "string"
        },
        "font_family": {
          "metadata": {
            "name": "FontFamily",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFontFamily"
            }
          ]
        },
        "font_size": {
          "title": "Font Size",
          "minimum": 0,
          "metadata": {
            "name": "FontSize",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "font_size_unit": {
          "default": "pt",
          "metadata": {
            "name": "FontSizeUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "font_style": {
          "metadata": {
            "name": "FontStyle",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFontStyle"
            }
          ]
        },
        "locked": {
          "title": "Locked",
          "metadata": {
            "name": "Locked",
            "type": "Attribute"
          },
          "type": "boolean"
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)"
          },
          "type": "string"
        },
        "the_z": {
          "title": "The Z",
          "minimum": 0,
          "metadata": {
            "name": "TheZ",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "the_t": {
          "title": "The T",
          "minimum": 0,
          "metadata": {
            "name": "TheT",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "the_c": {
          "title": "The C",
          "minimum": 0,
          "metadata": {
            "name": "TheC",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "points": {
          "title": "Points",
          "metadata": {
            "name": "Points",
            "type": "Attribute",
            "required": true
          },
          "type": "string"
        },
        "marker_start": {
          "metadata": {
            "name": "MarkerStart",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/Marker"
            }
          ]
        },
        "marker_end": {
          "metadata": {
            "name": "MarkerEnd",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/Marker"
            }
          ]
        }
      }
    },
    "Line": {
      "title": "Line",
      "description": "A straight line defined by it's end points.\n\n:ivar x1: The X coordinate of the start of the line. [units pixels]\n:ivar y1: The Y coordinate of the start of the line. [units pixels]\n:ivar x2: The X coordinate of the end of the line. [units pixels]\n:ivar y2: The Y coordinate of the end of the line. [units pixels]\n:ivar marker_start:\n:ivar marker_end:",
      "type": "object",
      "properties": {
        "transform": {
          "title": "Transform",
          "metadata": {
            "name": "Transform",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "allOf": [
            {
              "$ref": "#/definitions/AffineTransform"
            }
          ]
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "fill_color": {
          "title": "Fill Color",
          "metadata": {
            "name": "FillColor",
            "type": "Attribute"
          },
          "type": "integer"
        },
        "fill_rule": {
          "metadata": {
            "name": "FillRule",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFillRule"
            }
          ]
        },
        "stroke_color": {
          "title": "Stroke Color",
          "metadata": {
            "name": "StrokeColor",
            "type": "Attribute"
          },
          "type": "integer"
        },
        "stroke_width": {
          "title": "Stroke Width",
          "metadata": {
            "name": "StrokeWidth",
            "type": "Attribute"
          },
          "type": "number"
        },
        "stroke_width_unit": {
          "default": "pixel",
          "metadata": {
            "name": "StrokeWidthUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "stroke_dash_array": {
          "title": "Stroke Dash Array",
          "metadata": {
            "name": "StrokeDashArray",
            "type": "Attribute"
          },
          "type": "string"
        },
        "text": {
          "title": "Text",
          "metadata": {
            "name": "Text",
            "type": "Attribute"
          },
          "type": "string"
        },
        "font_family": {
          "metadata": {
            "name": "FontFamily",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFontFamily"
            }
          ]
        },
        "font_size": {
          "title": "Font Size",
          "minimum": 0,
          "metadata": {
            "name": "FontSize",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "font_size_unit": {
          "default": "pt",
          "metadata": {
            "name": "FontSizeUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "font_style": {
          "metadata": {
            "name": "FontStyle",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFontStyle"
            }
          ]
        },
        "locked": {
          "title": "Locked",
          "metadata": {
            "name": "Locked",
            "type": "Attribute"
          },
          "type": "boolean"
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)"
          },
          "type": "string"
        },
        "the_z": {
          "title": "The Z",
          "minimum": 0,
          "metadata": {
            "name": "TheZ",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "the_t": {
          "title": "The T",
          "minimum": 0,
          "metadata": {
            "name": "TheT",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "the_c": {
          "title": "The C",
          "minimum": 0,
          "metadata": {
            "name": "TheC",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "x1": {
          "title": "X1",
          "metadata": {
            "name": "X1",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        },
        "y1": {
          "title": "Y1",
          "metadata": {
            "name": "Y1",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        },
        "x2": {
          "title": "X2",
          "metadata": {
            "name": "X2",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        },
        "y2": {
          "title": "Y2",
          "metadata": {
            "name": "Y2",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        },
        "marker_start": {
          "metadata": {
            "name": "MarkerStart",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/Marker"
            }
          ]
        },
        "marker_end": {
          "metadata": {
            "name": "MarkerEnd",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/Marker"
            }
          ]
        }
      }
    },
    "Ellipse": {
      "title": "Ellipse",
      "description": "A simple ellipse object.\n\nIf rotation is required apply a transformation at the Shape level.\n\n:ivar x: The X coordinate of the center of the ellipse. [units\n    pixels]\n:ivar y: The Y coordinate of the center of the ellipse. [units\n    pixels]\n:ivar radius_x: The horizontal radius of the ellipse. [units pixels]\n:ivar radius_y: The vertical radius of the ellipse. [units pixels]",
      "type": "object",
      "properties": {
        "transform": {
          "title": "Transform",
          "metadata": {
            "name": "Transform",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "allOf": [
            {
              "$ref": "#/definitions/AffineTransform"
            }
          ]
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "fill_color": {
          "title": "Fill Color",
          "metadata": {
            "name": "FillColor",
            "type": "Attribute"
          },
          "type": "integer"
        },
        "fill_rule": {
          "metadata": {
            "name": "FillRule",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFillRule"
            }
          ]
        },
        "stroke_color": {
          "title": "Stroke Color",
          "metadata": {
            "name": "StrokeColor",
            "type": "Attribute"
          },
          "type": "integer"
        },
        "stroke_width": {
          "title": "Stroke Width",
          "metadata": {
            "name": "StrokeWidth",
            "type": "Attribute"
          },
          "type": "number"
        },
        "stroke_width_unit": {
          "default": "pixel",
          "metadata": {
            "name": "StrokeWidthUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "stroke_dash_array": {
          "title": "Stroke Dash Array",
          "metadata": {
            "name": "StrokeDashArray",
            "type": "Attribute"
          },
          "type": "string"
        },
        "text": {
          "title": "Text",
          "metadata": {
            "name": "Text",
            "type": "Attribute"
          },
          "type": "string"
        },
        "font_family": {
          "metadata": {
            "name": "FontFamily",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFontFamily"
            }
          ]
        },
        "font_size": {
          "title": "Font Size",
          "minimum": 0,
          "metadata": {
            "name": "FontSize",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "font_size_unit": {
          "default": "pt",
          "metadata": {
            "name": "FontSizeUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "font_style": {
          "metadata": {
            "name": "FontStyle",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFontStyle"
            }
          ]
        },
        "locked": {
          "title": "Locked",
          "metadata": {
            "name": "Locked",
            "type": "Attribute"
          },
          "type": "boolean"
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)"
          },
          "type": "string"
        },
        "the_z": {
          "title": "The Z",
          "minimum": 0,
          "metadata": {
            "name": "TheZ",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "the_t": {
          "title": "The T",
          "minimum": 0,
          "metadata": {
            "name": "TheT",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "the_c": {
          "title": "The C",
          "minimum": 0,
          "metadata": {
            "name": "TheC",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "x": {
          "title": "X",
          "metadata": {
            "name": "X",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        },
        "y": {
          "title": "Y",
          "metadata": {
            "name": "Y",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        },
        "radius_x": {
          "title": "Radius X",
          "metadata": {
            "name": "RadiusX",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        },
        "radius_y": {
          "title": "Radius Y",
          "metadata": {
            "name": "RadiusY",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        }
      }
    },
    "Point": {
      "title": "Point",
      "description": ":ivar x: The X coordinate of the point. [units pixels]\n:ivar y: The Y coordinate of the point. [units pixels]",
      "type": "object",
      "properties": {
        "transform": {
          "title": "Transform",
          "metadata": {
            "name": "Transform",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "allOf": [
            {
              "$ref": "#/definitions/AffineTransform"
            }
          ]
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "fill_color": {
          "title": "Fill Color",
          "metadata": {
            "name": "FillColor",
            "type": "Attribute"
          },
          "type": "integer"
        },
        "fill_rule": {
          "metadata": {
            "name": "FillRule",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFillRule"
            }
          ]
        },
        "stroke_color": {
          "title": "Stroke Color",
          "metadata": {
            "name": "StrokeColor",
            "type": "Attribute"
          },
          "type": "integer"
        },
        "stroke_width": {
          "title": "Stroke Width",
          "metadata": {
            "name": "StrokeWidth",
            "type": "Attribute"
          },
          "type": "number"
        },
        "stroke_width_unit": {
          "default": "pixel",
          "metadata": {
            "name": "StrokeWidthUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "stroke_dash_array": {
          "title": "Stroke Dash Array",
          "metadata": {
            "name": "StrokeDashArray",
            "type": "Attribute"
          },
          "type": "string"
        },
        "text": {
          "title": "Text",
          "metadata": {
            "name": "Text",
            "type": "Attribute"
          },
          "type": "string"
        },
        "font_family": {
          "metadata": {
            "name": "FontFamily",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFontFamily"
            }
          ]
        },
        "font_size": {
          "title": "Font Size",
          "minimum": 0,
          "metadata": {
            "name": "FontSize",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "font_size_unit": {
          "default": "pt",
          "metadata": {
            "name": "FontSizeUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "font_style": {
          "metadata": {
            "name": "FontStyle",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFontStyle"
            }
          ]
        },
        "locked": {
          "title": "Locked",
          "metadata": {
            "name": "Locked",
            "type": "Attribute"
          },
          "type": "boolean"
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)"
          },
          "type": "string"
        },
        "the_z": {
          "title": "The Z",
          "minimum": 0,
          "metadata": {
            "name": "TheZ",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "the_t": {
          "title": "The T",
          "minimum": 0,
          "metadata": {
            "name": "TheT",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "the_c": {
          "title": "The C",
          "minimum": 0,
          "metadata": {
            "name": "TheC",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "x": {
          "title": "X",
          "metadata": {
            "name": "X",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        },
        "y": {
          "title": "Y",
          "metadata": {
            "name": "Y",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        }
      }
    },
    "Mask": {
      "title": "Mask",
      "description": "The Mask ROI shape is a link to a BinData object that is a BIT mask drawn on\ntop of the image as an ROI.\n\nIt is applied at the same scale, pixel to pixel, as the Image the\nROI is applied to, unless a transform is applied at the shape level.\n\n:ivar bin_data:\n:ivar x: The X coordinate of the left side of the image. [units\n    pixels]\n:ivar y: The Y coordinate of the top side of the image. [units\n    pixels]\n:ivar width: The width of the mask. [units pixels]\n:ivar height: The height of the mask. [units pixels]",
      "type": "object",
      "properties": {
        "transform": {
          "title": "Transform",
          "metadata": {
            "name": "Transform",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "allOf": [
            {
              "$ref": "#/definitions/AffineTransform"
            }
          ]
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "fill_color": {
          "title": "Fill Color",
          "metadata": {
            "name": "FillColor",
            "type": "Attribute"
          },
          "type": "integer"
        },
        "fill_rule": {
          "metadata": {
            "name": "FillRule",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFillRule"
            }
          ]
        },
        "stroke_color": {
          "title": "Stroke Color",
          "metadata": {
            "name": "StrokeColor",
            "type": "Attribute"
          },
          "type": "integer"
        },
        "stroke_width": {
          "title": "Stroke Width",
          "metadata": {
            "name": "StrokeWidth",
            "type": "Attribute"
          },
          "type": "number"
        },
        "stroke_width_unit": {
          "default": "pixel",
          "metadata": {
            "name": "StrokeWidthUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "stroke_dash_array": {
          "title": "Stroke Dash Array",
          "metadata": {
            "name": "StrokeDashArray",
            "type": "Attribute"
          },
          "type": "string"
        },
        "text": {
          "title": "Text",
          "metadata": {
            "name": "Text",
            "type": "Attribute"
          },
          "type": "string"
        },
        "font_family": {
          "metadata": {
            "name": "FontFamily",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFontFamily"
            }
          ]
        },
        "font_size": {
          "title": "Font Size",
          "minimum": 0,
          "metadata": {
            "name": "FontSize",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "font_size_unit": {
          "default": "pt",
          "metadata": {
            "name": "FontSizeUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "font_style": {
          "metadata": {
            "name": "FontStyle",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFontStyle"
            }
          ]
        },
        "locked": {
          "title": "Locked",
          "metadata": {
            "name": "Locked",
            "type": "Attribute"
          },
          "type": "boolean"
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)"
          },
          "type": "string"
        },
        "the_z": {
          "title": "The Z",
          "minimum": 0,
          "metadata": {
            "name": "TheZ",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "the_t": {
          "title": "The T",
          "minimum": 0,
          "metadata": {
            "name": "TheT",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "the_c": {
          "title": "The C",
          "minimum": 0,
          "metadata": {
            "name": "TheC",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "bin_data": {
          "title": "Bin Data",
          "metadata": {
            "name": "BinData",
            "type": "Element",
            "required": true
          },
          "allOf": [
            {
              "$ref": "#/definitions/BinData"
            }
          ]
        },
        "x": {
          "title": "X",
          "metadata": {
            "name": "X",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        },
        "y": {
          "title": "Y",
          "metadata": {
            "name": "Y",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        },
        "width": {
          "title": "Width",
          "metadata": {
            "name": "Width",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        },
        "height": {
          "title": "Height",
          "metadata": {
            "name": "Height",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        }
      }
    },
    "Rectangle": {
      "title": "Rectangle",
      "description": "A simple rectangle object.\n\nIf rotation is required apply a transformation at the Shape level.\n\n:ivar x: The X value of the left edge or the rectangle. [units\n    pixels]\n:ivar y: The y value of the top edge or the rectangle. [units\n    pixels]\n:ivar width: The width of the rectangle. [units pixels]\n:ivar height: The height of the rectangle. [units pixels]",
      "type": "object",
      "properties": {
        "transform": {
          "title": "Transform",
          "metadata": {
            "name": "Transform",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "allOf": [
            {
              "$ref": "#/definitions/AffineTransform"
            }
          ]
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element",
            "namespace": "http://www.openmicroscopy.org/Schemas/OME/2016-06"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "fill_color": {
          "title": "Fill Color",
          "metadata": {
            "name": "FillColor",
            "type": "Attribute"
          },
          "type": "integer"
        },
        "fill_rule": {
          "metadata": {
            "name": "FillRule",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFillRule"
            }
          ]
        },
        "stroke_color": {
          "title": "Stroke Color",
          "metadata": {
            "name": "StrokeColor",
            "type": "Attribute"
          },
          "type": "integer"
        },
        "stroke_width": {
          "title": "Stroke Width",
          "metadata": {
            "name": "StrokeWidth",
            "type": "Attribute"
          },
          "type": "number"
        },
        "stroke_width_unit": {
          "default": "pixel",
          "metadata": {
            "name": "StrokeWidthUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "stroke_dash_array": {
          "title": "Stroke Dash Array",
          "metadata": {
            "name": "StrokeDashArray",
            "type": "Attribute"
          },
          "type": "string"
        },
        "text": {
          "title": "Text",
          "metadata": {
            "name": "Text",
            "type": "Attribute"
          },
          "type": "string"
        },
        "font_family": {
          "metadata": {
            "name": "FontFamily",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFontFamily"
            }
          ]
        },
        "font_size": {
          "title": "Font Size",
          "minimum": 0,
          "metadata": {
            "name": "FontSize",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "font_size_unit": {
          "default": "pt",
          "metadata": {
            "name": "FontSizeUnit",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnitsLength"
            }
          ]
        },
        "font_style": {
          "metadata": {
            "name": "FontStyle",
            "type": "Attribute"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ShapeFontStyle"
            }
          ]
        },
        "locked": {
          "title": "Locked",
          "metadata": {
            "name": "Locked",
            "type": "Attribute"
          },
          "type": "boolean"
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Shape:\\S+)|(Shape:\\S+)"
          },
          "type": "string"
        },
        "the_z": {
          "title": "The Z",
          "minimum": 0,
          "metadata": {
            "name": "TheZ",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "the_t": {
          "title": "The T",
          "minimum": 0,
          "metadata": {
            "name": "TheT",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "the_c": {
          "title": "The C",
          "minimum": 0,
          "metadata": {
            "name": "TheC",
            "type": "Attribute",
            "min_inclusive": 0
          },
          "type": "integer"
        },
        "x": {
          "title": "X",
          "metadata": {
            "name": "X",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        },
        "y": {
          "title": "Y",
          "metadata": {
            "name": "Y",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        },
        "width": {
          "title": "Width",
          "metadata": {
            "name": "Width",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        },
        "height": {
          "title": "Height",
          "metadata": {
            "name": "Height",
            "type": "Attribute",
            "required": true
          },
          "type": "number"
        }
      }
    },
    "UnionType": {
      "title": "UnionType",
      "type": "object",
      "properties": {
        "label": {
          "title": "Label",
          "metadata": {
            "name": "Label",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "polygon": {
          "title": "Polygon",
          "metadata": {
            "name": "Polygon",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Polygon"
          }
        },
        "polyline": {
          "title": "Polyline",
          "metadata": {
            "name": "Polyline",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Polyline"
          }
        },
        "line": {
          "title": "Line",
          "metadata": {
            "name": "Line",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Line"
          }
        },
        "ellipse": {
          "title": "Ellipse",
          "metadata": {
            "name": "Ellipse",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ellipse"
          }
        },
        "point": {
          "title": "Point",
          "metadata": {
            "name": "Point",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Point"
          }
        },
        "mask": {
          "title": "Mask",
          "metadata": {
            "name": "Mask",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Mask"
          }
        },
        "rectangle": {
          "title": "Rectangle",
          "metadata": {
            "name": "Rectangle",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Rectangle"
          }
        }
      }
    },
    "Roi": {
      "title": "Roi",
      "description": "A four dimensional 'Region of Interest'.\n\nIf they are not used, and the Image has more than one plane, the\nentire set of planes is assumed to be included in the ROI. Multiple\nROIs may be specified.\n\n:ivar union:\n:ivar annotation_ref:\n:ivar description: A description for the ROI. [plain-text multi-line\n    string]\n:ivar id:\n:ivar name: The Name identifies the ROI to the user. [plain-text\n    string]",
      "type": "object",
      "properties": {
        "union": {
          "title": "Union",
          "metadata": {
            "name": "Union",
            "type": "Element",
            "required": true
          },
          "allOf": [
            {
              "$ref": "#/definitions/UnionType"
            }
          ]
        },
        "annotation_ref": {
          "title": "Annotation Ref",
          "metadata": {
            "name": "AnnotationRef",
            "type": "Element"
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationRef"
          }
        },
        "description": {
          "title": "Description",
          "metadata": {
            "name": "Description",
            "type": "Element",
            "white_space": "preserve"
          },
          "type": "string"
        },
        "id": {
          "title": "Id",
          "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:\\S+)|(\\S+)",
          "metadata": {
            "name": "ID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:\\S+)|(\\S+)"
          },
          "type": "string"
        },
        "name": {
          "title": "Name",
          "metadata": {
            "name": "Name",
            "type": "Attribute"
          },
          "type": "string"
        }
      }
    },
    "BinaryOnly": {
      "title": "BinaryOnly",
      "description": ":ivar metadata_file: Filename of the OME-XML metadata file for\n    this binary data. If the file cannot be found, a search can\n    be performed based on the UUID.\n:ivar uuid: The unique identifier of another OME-XML block whose\n    metadata describes the binary data in this file. This UUID\n    is considered authoritative regardless of mismatches in the\n    filename.",
      "type": "object",
      "properties": {
        "metadata_file": {
          "title": "Metadata File",
          "metadata": {
            "name": "MetadataFile",
            "type": "Attribute",
            "required": true
          },
          "type": "string"
        },
        "uuid": {
          "title": "Uuid",
          "pattern": "(urn:uuid:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})",
          "metadata": {
            "name": "UUID",
            "type": "Attribute",
            "required": true,
            "pattern": "(urn:uuid:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"
          },
          "type": "string"
        }
      }
    }
  }
}
